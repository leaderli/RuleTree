//noinspection unchecked
options {
  STATIC = false;
  MULTI=true;
  VISITOR=true;
  NODE_PREFIX ="ast_";
  VISITOR_DATA_TYPE="";
  VISITOR_RETURN_TYPE="Object";
  GENERATE_GENERICS = true;
//  DEBUG_PARSER = true;
}
PARSER_BEGIN(RuleParser)
package io.leaderli.rule.tree;

import io.leaderli.litool.core.exception.LiAssertUtil;
import io.leaderli.litool.core.meta.LiTuple;
import io.leaderli.litool.core.text.StringUtils;
import io.leaderli.rule.NodeUtil;
import io.leaderli.rule.ParserContext;

import java.io.StringReader;

@SuppressWarnings("all")
public class RuleParser{
    private ParserContext context;
    public void setParserContext(ParserContext context) {
        this.context = context;
    }
    public RuleParser(String rule) {
       this(new StringReader(rule));
       this.context = new ParserContext();
    }
    public RuleParser(String rule,ParserContext context) {
       this(new StringReader(rule));
       this.context = context;
    }
 }
PARSER_END(RuleParser)

<DEFAULT>
SKIP : {
      " "
    | "\t"
    | "\n"
    | "\r"
    | "\f"
}
TOKEN : {
      <TRUE:"true">
    | <FALSE:"false">
    | <AND:"AND"|"and">
    | <OR:"OR"|"or">
    | <NOT:"NOT"|"not">
    | <INT: (<MINUS>)?("0"|(["1"-"9"] (["0"-"9"])*)) >
    | <DOUBLE:<INT>( "." ["0"-"9"])+>
    | <PERCENT:(<DOUBLE>|<INT>)"%">
    | <TIME:["0"-"2"]["0"-"9"]":"["0"-"5"]["0"-"9"]":"["0"-"5"]["0"-"9"]>
    | <GT: ">" >
    | <LT: "<" >
    | <LE: "<=" >
    | <GE: ">=" >
    | <EQ: "=" >
    | <NE: "!=" >
    | <PLUS: "+" >
    | <MINUS: "-" >
    | <LPAREN: "(" >
    | <RPAREN: ")" >
    | <SEMICOLON: ";">
    | <IDENTIFIER: (["a"-"z"]|["A"-"Z"]|"_")(["a"-"z"]|["A"-"Z"]|["0"-"9"]|"_")*>
}


SimpleNode entry() :{}{
    (rule()) +<EOF>{
        return jjtThis;
    }
}
void rule():{Token t;}{
    "rule:"
    t=<INT>
    {
        int rule = Integer.parseInt(t.image);
        context.debug("rule:"+rule+"\r\n");
        context.isValidRule(rule);
        jjtThis.jjtSetValue(rule);
    }
    expr()
    {
        context.debug("\r\n");
    }
}
void expr():{}{
    term() (
         <AND>{context.debug(" and ");jjtThis.jjtSetValue(AND);}#and term()
       | <OR>{context.debug(" or ");jjtThis.jjtSetValue(OR);}#or term()
    )*
}

void term():{}{

         <TRUE>{context.debug("true");jjtThis.jjtSetValue(TRUE);}
       | <FALSE>{context.debug("false");jjtThis.jjtSetValue(FALSE);}
       | <NOT> {context.debug(" not ");}term() {jjtThis.jjtSetValue(NOT);}
       | <LPAREN> {context.debug(" ( ");}expr() <RPAREN> {context.debug(" ) ");jjtThis.jjtSetValue(LPAREN);}
       | compare() {jjtThis.jjtSetValue(0);}
}

void num_int() :{Token t;}{
    t=<INT> {context.debug(t.image);jjtThis.jjtSetValue(LiTuple.of("INT",Integer.parseInt(t.image)));}
}
void num_double() :{Token t;}{
    t=<DOUBLE> {context.debug(t.image);jjtThis.jjtSetValue(LiTuple.of("DOUBLE",Double.parseDouble(t.image)));}
}
void num_percent() :{Token t;}{
    t=<PERCENT> {context.debug(t.image);jjtThis.jjtSetValue(LiTuple.of("PERCENT",Double.parseDouble(t.image.replace("%","")) / 100));}
}
void num_time() :{Token t;}{
    t=<TIME> {context.debug(t.image);jjtThis.jjtSetValue(LiTuple.of("TIME",t.image));}
}
void num() #void:{}{
    num_int() |num_double() |num_percent() |num_time()
}

void compare() :{Token name;String type;}{
    var()
    {
        type = NodeUtil.getCurrentChildrenNumNodeType(jjtree);
    }
    (math() var()
        {
            LiAssertUtil.assertTrue(StringUtils.equalsAny(type,"INT","DOUBLE","PERCENT"),"only <INT>,<DOUBLE>,<PERCENT> support '+','-'");
            LiAssertUtil.assertTrue(StringUtils.equalsAny(type, NodeUtil.getCurrentChildrenNumNodeType(jjtree)),"should use type <"+type+">");
        }
    )?
    operator()
    {
        //STR 只允许使用 '=' '!='
       if("STR".equals(type)){
            int operator= NodeUtil.getCurrentChildrenOperatorNodeValue(jjtree);
            LiAssertUtil.assertTrue(operator == EQ || operator == NE ,"<STR> only support '=','!= :"+jjtThis);
       }

    }
    num()
    {

        // STR 对数据进行类型转换
        if("STR".equals(type)){
            SimpleNode<LiTuple<String, ?>> simpleNode = (SimpleNode<LiTuple<String,?>>) jjtree.peekNode();
            simpleNode.jjtSetValue(LiTuple.of(type,simpleNode.jjtGetValue()._2+""));
        }
        LiAssertUtil.assertTrue(StringUtils.equalsAny(type, NodeUtil.getCurrentChildrenNumNodeType(jjtree)),"should use type <"+type+">");

    }
    {
        //closeNodeScope 会在最后一个代码块前添加，此处可以校验整个compare函数，不要删除，否则上面一段代码无法取到num()节点
        // 构建执行函数
    }
}

//noinspection unchecked
void math():{}{
      <PLUS>{context.debug(" + ");jjtThis.jjtSetValue(PLUS);}{}
    | <MINUS>{context.debug(" - ");jjtThis.jjtSetValue(MINUS);}{}
}


void operator() :{}{
      <EQ>{context.debug(" = "); jjtThis.jjtSetValue(EQ);}
    | <NE>{context.debug(" != "); jjtThis.jjtSetValue(NE);}
    | <GT>{context.debug(" > "); jjtThis.jjtSetValue(GT);}
    | <GE>{context.debug(" >= "); jjtThis.jjtSetValue(GE);}
    | <LT>{context.debug(" < "); jjtThis.jjtSetValue(LT);}
    | <LE>{context.debug(" <= "); jjtThis.jjtSetValue(LE);}
}

void var() :{Token t;}{
    t=<IDENTIFIER>
    {

    context.debug(context.getType(t.image)+" "+t.image);
    context.addNeededParameter(t.image);
    jjtThis.jjtSetValue(LiTuple.of(context.getType(t.image),t.image));
    }
}

// test
SimpleNode test() :{}{
    (
         num()
        |expr()
    )
    <EOF>
    {
        return jjtThis;
    }
}


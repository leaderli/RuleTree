options {
  STATIC = false;
  MULTI=true;
  VISITOR=true;
  VISITOR_DATA_TYPE="StringBuilder";
  VISITOR_RETURN_TYPE="void";
}
PARSER_BEGIN(RuleParser)
package io.leaderli.rule.tree;
import java.io.StringReader;
public class RuleParser{
    public static SimpleNode test(String expr) throws ParseException {
        RuleParser demo = new RuleParser(new StringReader(expr));
        return (SimpleNode) demo.test().jjtGetChild(0);
    }
 }
PARSER_END(RuleParser)

<DEFAULT>
SKIP : {
      " "
    | "\t"
    | "\n"
    | "\r"
    | "\f"
}
TOKEN : {
     <TRUE:"true">
    | <FALSE:"false">
    | <AND:"AND"|"and">
    | <OR:"OR"|"or">
    | <NOT:"NOT"|"not">
    | <INT: "0"|(["1"-"9"] (["0"-"9"])*) >
    | <DOUBLE:<INT>( "." ["0"-"9"])+>
    | <PERCENT:(<DOUBLE>|<INT>)"%">
    | <TIME:["0"-"2"]["0"-"9"]":"["0"-"5"]["0"-"9"]":"["0"-"5"]["0"-"9"]>
    | < GT: ">" >
    | < LT: "<" >
    | < LE: "<=" >
    | < GE: ">=" >
    | < EQ: "==" >:COMPARE_STATE
    | < NE: "!=" >:COMPARE_STATE
    | < PLUS: "+" >
    | < MINUS: "-" >
    | <SEMICOLON: ";">
    | <IDENTIFIER: (["a"-"z"]|["A"-"Z"]|"_")(["a"-"z"]|["A"-"Z"]|["0"-"9"]|"_")*>
}
<COMPARE_STATE>
TOKEN : {
 <_INT:<INT>>:DEFAULT
| <_DOUBLE:<DOUBLE>> :DEFAULT
| <_PERCENT:<PERCENT>> :DEFAULT
| <_TIME:<TIME>> :DEFAULT
| <STRING_LITERAL: (~["\n","\r","\t"])+>:DEFAULT
}


SimpleNode Start() :{}{
    (rule()) +<EOF>{
        return jjtThis;
    }
}
void rule():{Token t;}{
    "rule:"
    t=<INT> { jjtThis.jjtSetValue(Integer.parseInt(t.image));}
    expr()
}
void expr()#void:{}{
    term() (
         <AND>#and term()
       | <OR>#or term()
    )*
}

void term():{}{
         <TRUE>{jjtThis.jjtSetValue(true);}
       | <FALSE>{jjtThis.jjtSetValue(false);}
       | compare2(){jjtThis.jjtSetValue("compare2");}
       | "(" expr() ")"{jjtThis.jjtSetValue("()");}
       | <NOT> term() #neg
}
void num():{Token t;}{
   ( t=<INT>|t=<DOUBLE>|t=<PERCENT>){
        System.out.println(t.kind);
        String value = t.image;
        if(value.endsWith("%")){
            jjtThis.jjtSetValue(Double.parseDouble(value.substring(0, value.length()-1)) / 100);
        }else {
            jjtThis.jjtSetValue(Double.parseDouble(value));
        }
    }
}
void str():{Token t;}{
    t=<TIME> {
        jjtThis.jjtSetValue(t.image);
    }
}
void compare2():{Token name;}{
    name=<IDENTIFIER>(<EQ>|<NE>)(<_INT>|<_DOUBLE> |<_PERCENT> |<_TIME> |<STRING_LITERAL>)
}

// test

SimpleNode test() :{}{
    (num()|compare2()|expr()) <EOF>{
        return jjtThis;
    }
}
//void var2():{Token t;}{
//    t=<IDENTIFIER>{
//      String name  = t.image;
//            if("a".equals(name)){
//                    num();
//            }else {
//                str();
//            }
//    }
//}SimpleNode test2() :{}{
//      var2() <EOF>{
//        return jjtThis;
//    }
//}

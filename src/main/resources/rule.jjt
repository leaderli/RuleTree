options {
  STATIC = false;
  MULTI=true;
  VISITOR=true;
  VISITOR_DATA_TYPE="io.leaderli.rule.RuleContext";
  VISITOR_RETURN_TYPE="void";
  DEBUG_PARSER = true;
//  DEBUG_TOKEN_MANAGER = true;
//  DEBUG_LOOKAHEAD = true;
}
PARSER_BEGIN(RuleParser)
package io.leaderli.rule.tree;
import java.io.StringReader;
import io.leaderli.litool.core.exception.LiAssertUtil;import io.leaderli.rule.RuleContext;

public class RuleParser{
    private RuleContext context;
    public void setRuleContext(RuleContext context) {
        this.context = context;
    }
    public static SimpleNode test(String expr) throws ParseException {
        RuleParser demo = new RuleParser(new StringReader(expr));
        return (SimpleNode) demo.test().jjtGetChild(0);
    }
    public static SimpleNode test(String expr,RuleContext context) throws ParseException {
        RuleParser demo = new RuleParser(new StringReader(expr));
        demo.context = context;
        return (SimpleNode) demo.test().jjtGetChild(0);
    }
 }
PARSER_END(RuleParser)

<DEFAULT>
SKIP : {
      " "
    | "\t"
    | "\n"
    | "\r"
    | "\f"
}
TOKEN : {
      <TRUE:"true">
    | <FALSE:"false">
    | <AND:"AND"|"and">
    | <OR:"OR"|"or">
    | <NOT:"NOT"|"not">
    | <INT: "0"|(["1"-"9"] (["0"-"9"])*) >
    | <DOUBLE:<INT>( "." ["0"-"9"])+>
    | <PERCENT:(<DOUBLE>|<INT>)"%">
    | <TIME:["0"-"2"]["0"-"9"]":"["0"-"5"]["0"-"9"]":"["0"-"5"]["0"-"9"]>
    | <GT: ">" >
    | <LT: "<" >
    | <LE: "<=" >
    | <GE: ">=" >
    | <EQ: "=" >:COMPARE_STATE
    | <NE: "!=" >:COMPARE_STATE
    | <LPAREN: "(" >
    | <RPAREN: ")" >
    | <SEMICOLON: ";">
    | <IDENTIFIER: (["a"-"z"]|["A"-"Z"]|"_")(["a"-"z"]|["A"-"Z"]|["0"-"9"]|"_")*>
}
<COMPARE_STATE>
TOKEN : {
 <_INT:<INT>>:DEFAULT
| <_DOUBLE:<DOUBLE>> :DEFAULT
| <_PERCENT:<PERCENT>> :DEFAULT
| <_TIME:<TIME>> :DEFAULT
| <LBRACKET: "[" >:ARR_STATE
| <STRING_LITERAL: "'"(~["\n","\r","\t"])+"'">:DEFAULT
}
<ARR_STATE>
TOKEN : {
  <COMMA: "," >
| <_INT2:  <INT>>
| <_TIME2:  <TIME>>
| <_DOUBLE2:<DOUBLE>>
| <_PERCENT2:<PERCENT>>
| <RBRACKET: "]" >  :DEFAULT
| <STRING_LITERAL2: <STRING_LITERAL>>
}


SimpleNode Start() :{}{
    (rule()) +<EOF>{
        return jjtThis;
    }
}
void rule():{Token t;}{
    "rule:"
    t=<INT> { jjtThis.jjtSetValue(Integer.parseInt(t.image));}
    expr()
}
void expr()#void:{}{
    term() (
         <AND>#and term()
       | <OR>#or term()
    )*
}

void term():{}{
         <TRUE>{jjtThis.jjtSetValue(true);}
       | <FALSE>{jjtThis.jjtSetValue(false);}
       | compare()
       | <LPAREN> expr() <RPAREN> {jjtThis.jjtSetValue("()");}
       | <NOT> term() #neg
}

void time_value():{Token t;}{
    (t=<TIME>|t=<_TIME>|t=<_TIME2> ) {jjtThis.jjtSetValue(t.image);}
}
void int_value():{Token t;}{
   (t=<INT>|t=<_INT>|t=<_INT2>)  {jjtThis.jjtSetValue(Integer.parseInt(t.image));}
}
void double_value():{Token t;}{
   (t=<DOUBLE>|t=<_DOUBLE>|t=<_DOUBLE2> )  {jjtThis.jjtSetValue(Double.parseDouble(t.image));}
}
void percent_value():{Token t;}{
  (t=<PERCENT>|t=<_PERCENT>|t=<_PERCENT2>) {jjtThis.jjtSetValue(Double.parseDouble(t.image.replace("%","")) / 100);}
}
void num(String type) #void:{Token t;}{
      int_value() {
        LiAssertUtil.assertTrue(type==null ||"INT".equals(type));
     }
    | double_value(){
        LiAssertUtil.assertTrue(type==null |"DOUBLE".equals(type));
    }
    | percent_value(){
        LiAssertUtil.assertTrue(type==null ||"PERCENT".equals(type));
    }
}
void num_arr(String type) #void:{Token t;}{
     num(type)
    | (<LBRACKET> num(type) (<COMMA> num(type))*<RBRACKET>) #arr
}
void compare() :{Token name;String type;}{
    {type=var();
        if("STR".equals(type)){
            str_operator();
//            num_arr(type);
        }else{
            operator(type);
            num_arr(type);
        }
    }
//    name=<IDENTIFIER>(<EQ>|<NE>)(<_INT>|<_DOUBLE> |<_PERCENT> |<_TIME> |<STRING_LITERAL>)
}

void operator(String type) :{String op;}{
      (<EQ>{jjtThis.jjtSetValue("=");}|<NE>{jjtThis.jjtSetValue("!=");})
//      (num(type) |("[" num(type) (","num(type))*"]"))
    | (<GT>{jjtThis.jjtSetValue(">");}|<GE>{jjtThis.jjtSetValue(">=");}|<LT>{jjtThis.jjtSetValue("<");}|<LE>{jjtThis.jjtSetValue("<=");})
//    num(type)
}
void str_operator():{String op;}{
    num(null)
//    (<EQ>{jjtThis.jjtSetValue("=");}|<NE>{jjtThis.jjtSetValue("!=");})( <STRING_LITERAL> |(<LBRACKET><STRING_LITERAL> (<COMMA><STRING_LITERAL>)*<RBRACKET>))
}

String var() :{Token t;}{

   t=<IDENTIFIER>{
        jjtThis.jjtSetValue(t.image);
       return context.getType(t.image);
   }
//    {
//          if("STR".equals(type)){
//               int_value();
//          } else if("DOUBLE".equals(type)){
//               double_value();
//          }else if("PERCENT".equals(type)){
//               percent_value();
//          }else {
//               throw new ParseException(type+" unsupported +、- " );
//          }
//      }
//   {
//       if("INT".equals(type)){
//            int_value();
//       } else if("DOUBLE".equals(type)){
//            double_value();
//       }else if("PERCENT".equals(type)){
//            percent_value();
//       }else {
//            throw new ParseException(type+" unsupported +、- " );
//       }
//   }
}

// test

SimpleNode test() :{}{
    (
         num(null)
        | time_value()
        | LOOKAHEAD(2)expr()
        | var()
    )
    <EOF>
    {
        return jjtThis;
    }
}
//void var2():{Token t;}{
//    t=<IDENTIFIER>{
//      String name  = t.image;
//            if("a".equals(name)){
//                    num();
//            }else {
//                str();
//            }
//    }
//}SimpleNode test2() :{}{
//      var2() <EOF>{
//        return jjtThis;
//    }
//}

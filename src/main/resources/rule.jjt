options {
  STATIC = false;
  MULTI=true;
  VISITOR=true;
  VISITOR_DATA_TYPE="StringBuilder";
  VISITOR_RETURN_TYPE="void";
}
PARSER_BEGIN(RuleParser)
package io.leaderli.rule.tree;
import java.io.StringReader;
public class RuleParser{
    public static void main(String[] args) throws Exception {
      RuleParser demo = new RuleParser(new StringReader("str aa;"));
      SimpleNode node = demo.Start();
      node.dump(" ");
    }
 }
PARSER_END(RuleParser)

SKIP : {
" "
}
TOKEN : {
    <TYPE:"str"|"number">|
    <NAME: (["a"-"z"]|["A"-"Z"]|"_")(["a"-"z"]|["A"-"Z"]|["0"-"9"]|"_")*>|
    <NUM:<INT>(<FLOAT>)? ("%")?> |
    < #INT: "0"|(["1"-"9"] (["0"-"9"])*) >|
    < #FLOAT:  "." (["0"-"9"])+ >|
    <SEMICOLON: ";">
}


SimpleNode Start() :{}{
    (var()) +<EOF>{
        return jjtThis;
    }
}
void num():{Token t;}{
    t=<NUM>{jjtThis.jjtSetValue(t.image);}
}
void var():{Token t;}{
    <TYPE>
    t=<NAME>{jjtThis.jjtSetValue(t.image);}
    <SEMICOLON>
}


// test

SimpleNode test_num() :{}{
    num()<EOF>{
        return jjtThis;
    }
}

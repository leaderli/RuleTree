/* Generated By:JavaCC: Do not edit this line. RuleParserDefaultVisitor.java Version 7.0.13 */
package io.leaderli.rule;

import io.leaderli.litool.core.meta.LiTuple;
import io.leaderli.rule.tree.*;

import static io.leaderli.rule.tree.RuleParserConstants.*;

@SuppressWarnings("rawtypes")
public class RuleContextVisitor implements RuleParserVisitor {

    @Override
    public Object visit(SimpleNode node, Object data) {
        return null;
    }

    @Override
    public Object visit(ast_entry node, Object data) {
        RuleFunction[] rules = (RuleFunction[]) node.childrenAccept(this, data);
        return new EntryFunction(rules);
    }

    @Override
    public Object visit(ast_rule node, Object data) {
        int result = node.jjtGetValue();
        ExprFunction expr = (ExprFunction) node.jjtGetChild(0).jjtAccept(this, data);
        return new RuleFunction(result, expr);
    }

    @Override
    public Object visit(ast_expr node, Object data) {
        int operatorCount = node.jjtGetNumChildren() / 2;
        int termCount = operatorCount + 1;
        int[] operators = new int[operatorCount];
        TermFunction[] terms = new TermFunction[termCount];
        terms[0] = (TermFunction) node.jjtGetChild(0).jjtAccept(this, data);
        int nodeIndex = 0;
        for (int i = 0; i < operatorCount; i++) {
            operators[i] = (int) node.jjtGetChild(++nodeIndex).jjtGetValue();
            terms[i + 1] = (TermFunction) node.jjtGetChild(++nodeIndex).jjtAccept(this, data);
        }
        return new ExprFunction(operators, terms);
    }

    @Override
    public Object visit(ast_and node, Object data) {
        return null;
    }

    @Override
    public Object visit(ast_or node, Object data) {

        return null;
    }

    @Override
    public Object visit(ast_term node, Object data) {
        int operation = node.jjtGetValue();
        if (operation == NOT) {
            return new TermFunction((TermFunction) node.jjtGetChild(0).jjtAccept(this, data));
        }
        if (operation == LPAREN) {
            return new TermFunction((ExprFunction) node.jjtGetChild(0).jjtAccept(this, data));
        }
        if (operation == 0) {
            return new TermFunction((CompareFunction) node.jjtGetChild(0).jjtAccept(this, data));
        }
        return new TermFunction(operation);
    }

    @Override
    public Object visit(ast_num_int node, Object data) {
        return null;
    }

    @Override
    public Object visit(ast_num_double node, Object data) {
        return null;
    }

    @Override
    public Object visit(ast_num_percent node, Object data) {
        return null;
    }

    @Override
    public Object visit(ast_num_time node, Object data) {
        return null;
    }

    @Override
    public Object visit(ast_compare node, Object data) {
        return CompareFunction.instance(node);
    }

    @Override
    public Object visit(ast_math node, Object data) {
        return null;
    }

    @Override
    public Object visit(ast_operator node, Object data) {
        return null;
    }

    @Override
    public Object visit(ast_var node, Object data) {
        return null;
    }

    @Override
    public Object visit(ast_test node, Object data) {
        return null;
    }

    public ExprFunction visit(ast_rule node) {
        return (ExprFunction) visit(node, null);
    }
}

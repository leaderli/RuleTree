/* RuleParser.java */
/* Generated By:JJTree&JavaCC: Do not edit this line. RuleParser.java */
package io.leaderli.rule.tree;

import java.io.StringReader;
import io.leaderli.litool.core.exception.LiAssertUtil;
import io.leaderli.litool.core.meta.LiTuple;
import io.leaderli.litool.core.text.StringUtils;
import io.leaderli.rule.RuleContext;

public class RuleParser/* @bgen(jjtree) */ implements RuleParserTreeConstants, RuleParserConstants {/* @bgen(jjtree) */
    protected JJTRuleParserState jjtree = new JJTRuleParserState();
    private RuleContext context;

    public void setRuleContext(RuleContext context) {
        this.context = context;
    }

    public static SimpleNode test(String expr) throws ParseException {
        RuleParser demo = new RuleParser(new StringReader(expr));
        return (SimpleNode) demo.test().jjtGetChild(0);
    }

    public static SimpleNode test(String expr, RuleContext context) throws ParseException {
        RuleParser demo = new RuleParser(new StringReader(expr));
        demo.context = context;
        return (SimpleNode) demo.test().jjtGetChild(0);
    }

    final public SimpleNode Start() throws ParseException {
        trace_call("Start");
        try {
            /* @bgen(jjtree) Start */
            ASTStart jjtn000 = new ASTStart(JJTSTART);
            boolean jjtc000 = true;
            jjtree.openNodeScope(jjtn000);
            try {
                label_1: while (true) {
                    rule();
                    switch ((jj_ntk == -1) ? jj_ntk_f() : jj_ntk) {
                    case 25: {
                        ;
                        break;
                    }
                    default:
                        jj_la1[0] = jj_gen;
                        break label_1;
                    }
                }
                jj_consume_token(0);
                jjtree.closeNodeScope(jjtn000, true);
                jjtc000 = false;
                {
                    if ("" != null)
                        return jjtn000;
                }
            } catch (Throwable jjte000) {
                if (jjtc000) {
                    jjtree.clearNodeScope(jjtn000);
                    jjtc000 = false;
                } else {
                    jjtree.popNode();
                }
                if (jjte000 instanceof RuntimeException) {
                    {
                        if (true)
                            throw (RuntimeException) jjte000;
                    }
                }
                if (jjte000 instanceof ParseException) {
                    {
                        if (true)
                            throw (ParseException) jjte000;
                    }
                }
                {
                    if (true)
                        throw (Error) jjte000;
                }
            } finally {
                if (jjtc000) {
                    jjtree.closeNodeScope(jjtn000, true);
                }
            }
            throw new Error("Missing return statement in function");
        } finally {
            trace_return("Start");
        }
    }

    final public void rule() throws ParseException {
        trace_call("rule");
        try {
            /* @bgen(jjtree) rule */
            ASTrule jjtn000 = new ASTrule(JJTRULE);
            boolean jjtc000 = true;
            jjtree.openNodeScope(jjtn000);
            Token t;
            try {
                jj_consume_token(25);
                t = jj_consume_token(INT);
                jjtn000.jjtSetValue(Integer.parseInt(t.image));
                expr();
            } catch (Throwable jjte000) {
                if (jjtc000) {
                    jjtree.clearNodeScope(jjtn000);
                    jjtc000 = false;
                } else {
                    jjtree.popNode();
                }
                if (jjte000 instanceof RuntimeException) {
                    {
                        if (true)
                            throw (RuntimeException) jjte000;
                    }
                }
                if (jjte000 instanceof ParseException) {
                    {
                        if (true)
                            throw (ParseException) jjte000;
                    }
                }
                {
                    if (true)
                        throw (Error) jjte000;
                }
            } finally {
                if (jjtc000) {
                    jjtree.closeNodeScope(jjtn000, true);
                }
            }
        } finally {
            trace_return("rule");
        }
    }

    final public void expr() throws ParseException {
        trace_call("expr");
        try {

            term();
            label_2: while (true) {
                switch ((jj_ntk == -1) ? jj_ntk_f() : jj_ntk) {
                case AND:
                case OR: {
                    ;
                    break;
                }
                default:
                    jj_la1[1] = jj_gen;
                    break label_2;
                }
                switch ((jj_ntk == -1) ? jj_ntk_f() : jj_ntk) {
                case AND: {
                    ASTand jjtn001 = new ASTand(JJTAND);
                    boolean jjtc001 = true;
                    jjtree.openNodeScope(jjtn001);
                    try {
                        jj_consume_token(AND);
                    } finally {
                        if (jjtc001) {
                            jjtree.closeNodeScope(jjtn001, true);
                        }
                    }
                    term();
                    break;
                }
                case OR: {
                    ASTor jjtn002 = new ASTor(JJTOR);
                    boolean jjtc002 = true;
                    jjtree.openNodeScope(jjtn002);
                    try {
                        jj_consume_token(OR);
                    } finally {
                        if (jjtc002) {
                            jjtree.closeNodeScope(jjtn002, true);
                        }
                    }
                    term();
                    break;
                }
                default:
                    jj_la1[2] = jj_gen;
                    jj_consume_token(-1);
                    throw new ParseException();
                }
            }
        } finally {
            trace_return("expr");
        }
    }

    final public void term() throws ParseException {
        trace_call("term");
        try {
            /* @bgen(jjtree) term */
            ASTterm jjtn000 = new ASTterm(JJTTERM);
            boolean jjtc000 = true;
            jjtree.openNodeScope(jjtn000);
            try {
                switch ((jj_ntk == -1) ? jj_ntk_f() : jj_ntk) {
                case TRUE: {
                    jj_consume_token(TRUE);
                    jjtree.closeNodeScope(jjtn000, true);
                    jjtc000 = false;
                    jjtn000.jjtSetValue(true);
                    break;
                }
                case FALSE: {
                    jj_consume_token(FALSE);
                    jjtree.closeNodeScope(jjtn000, true);
                    jjtc000 = false;
                    jjtn000.jjtSetValue(false);
                    break;
                }
                case NOT: {
                    jj_consume_token(NOT);
                    ASTneg jjtn001 = new ASTneg(JJTNEG);
                    boolean jjtc001 = true;
                    jjtree.openNodeScope(jjtn001);
                    try {
                        term();
                    } catch (Throwable jjte001) {
                        if (jjtc001) {
                            jjtree.clearNodeScope(jjtn001);
                            jjtc001 = false;
                        } else {
                            jjtree.popNode();
                        }
                        if (jjte001 instanceof RuntimeException) {
                            {
                                if (true)
                                    throw (RuntimeException) jjte001;
                            }
                        }
                        if (jjte001 instanceof ParseException) {
                            {
                                if (true)
                                    throw (ParseException) jjte001;
                            }
                        }
                        {
                            if (true)
                                throw (Error) jjte001;
                        }
                    } finally {
                        if (jjtc001) {
                            jjtree.closeNodeScope(jjtn001, true);
                        }
                    }
                    break;
                }
                case LPAREN: {
                    jj_consume_token(LPAREN);
                    expr();
                    jj_consume_token(RPAREN);
                    jjtree.closeNodeScope(jjtn000, true);
                    jjtc000 = false;
                    jjtn000.jjtSetValue("()");
                    break;
                }
                case IDENTIFIER: {
                    compare();
                    break;
                }
                default:
                    jj_la1[3] = jj_gen;
                    jj_consume_token(-1);
                    throw new ParseException();
                }
            } catch (Throwable jjte000) {
                if (jjtc000) {
                    jjtree.clearNodeScope(jjtn000);
                    jjtc000 = false;
                } else {
                    jjtree.popNode();
                }
                if (jjte000 instanceof RuntimeException) {
                    {
                        if (true)
                            throw (RuntimeException) jjte000;
                    }
                }
                if (jjte000 instanceof ParseException) {
                    {
                        if (true)
                            throw (ParseException) jjte000;
                    }
                }
                {
                    if (true)
                        throw (Error) jjte000;
                }
            } finally {
                if (jjtc000) {
                    jjtree.closeNodeScope(jjtn000, true);
                }
            }
        } finally {
            trace_return("term");
        }
    }

    final public void num() throws ParseException {
        trace_call("num");
        try {
            /* @bgen(jjtree) num */
            ASTnum jjtn000 = new ASTnum(JJTNUM);
            boolean jjtc000 = true;
            jjtree.openNodeScope(jjtn000);
            Token t;
            try {
                switch ((jj_ntk == -1) ? jj_ntk_f() : jj_ntk) {
                case INT: {
                    t = jj_consume_token(INT);
                    break;
                }
                case DOUBLE: {
                    t = jj_consume_token(DOUBLE);
                    break;
                }
                case PERCENT: {
                    t = jj_consume_token(PERCENT);
                    break;
                }
                case TIME: {
                    t = jj_consume_token(TIME);
                    break;
                }
                default:
                    jj_la1[4] = jj_gen;
                    jj_consume_token(-1);
                    throw new ParseException();
                }
                jjtree.closeNodeScope(jjtn000, true);
                jjtc000 = false;
                String value = t.image;
                switch (t.kind) {
                case INT:
                    jjtn000.jjtSetValue(LiTuple.of("INT", Integer.parseInt(value)));
                    break;
                case DOUBLE:
                    jjtn000.jjtSetValue(LiTuple.of("DOUBLE", Double.parseDouble(value)));
                    break;
                case PERCENT:
                    jjtn000.jjtSetValue(LiTuple.of("PERCENT", Double.parseDouble(value.replace("%", "")) / 100));
                    break;
                case TIME:
                    jjtn000.jjtSetValue(LiTuple.of("TIME", value));
                    break;
                default: {
                    if (true)
                        throw new ParseException("unsupported token " + tokenImage[t.kind]);
                }
                }
            } finally {
                if (jjtc000) {
                    jjtree.closeNodeScope(jjtn000, true);
                }
            }
        } finally {
            trace_return("num");
        }
    }

    final public void compare() throws ParseException {
        trace_call("compare");
        try {
            /* @bgen(jjtree) compare */
            ASTcompare jjtn000 = new ASTcompare(JJTCOMPARE);
            boolean jjtc000 = true;
            jjtree.openNodeScope(jjtn000);
            Token name;
            String type;
            try {
                var();
                switch ((jj_ntk == -1) ? jj_ntk_f() : jj_ntk) {
                case 26:
                case 27: {
                    switch ((jj_ntk == -1) ? jj_ntk_f() : jj_ntk) {
                    case 26: {
                        jj_consume_token(26);
                        break;
                    }
                    case 27: {
                        jj_consume_token(27);
                        break;
                    }
                    default:
                        jj_la1[5] = jj_gen;
                        jj_consume_token(-1);
                        throw new ParseException();
                    }
                    switch ((jj_ntk == -1) ? jj_ntk_f() : jj_ntk) {
                    case INT:
                    case DOUBLE:
                    case PERCENT:
                    case TIME: {
                        num();
                        break;
                    }
                    case IDENTIFIER: {
                        var();
                        break;
                    }
                    default:
                        jj_la1[6] = jj_gen;
                        jj_consume_token(-1);
                        throw new ParseException();
                    }
                    break;
                }
                default:
                    jj_la1[7] = jj_gen;
                    ;
                }
                operator();
                num();
            } catch (Throwable jjte000) {
                if (jjtc000) {
                    jjtree.clearNodeScope(jjtn000);
                    jjtc000 = false;
                } else {
                    jjtree.popNode();
                }
                if (jjte000 instanceof RuntimeException) {
                    {
                        if (true)
                            throw (RuntimeException) jjte000;
                    }
                }
                if (jjte000 instanceof ParseException) {
                    {
                        if (true)
                            throw (ParseException) jjte000;
                    }
                }
                {
                    if (true)
                        throw (Error) jjte000;
                }
            } finally {
                if (jjtc000) {
                    jjtree.closeNodeScope(jjtn000, true);
                }
            }
        } finally {
            trace_return("compare");
        }
    }

    final public void operator() throws ParseException {
        trace_call("operator");
        try {
            /* @bgen(jjtree) operator */
            ASToperator jjtn000 = new ASToperator(JJTOPERATOR);
            boolean jjtc000 = true;
            jjtree.openNodeScope(jjtn000);
            Token t;
            try {
                switch ((jj_ntk == -1) ? jj_ntk_f() : jj_ntk) {
                case EQ: {
                    t = jj_consume_token(EQ);
                    break;
                }
                case NE: {
                    t = jj_consume_token(NE);
                    break;
                }
                case GT: {
                    t = jj_consume_token(GT);
                    break;
                }
                case GE: {
                    t = jj_consume_token(GE);
                    break;
                }
                case LT: {
                    t = jj_consume_token(LT);
                    break;
                }
                case LE: {
                    t = jj_consume_token(LE);
                    break;
                }
                default:
                    jj_la1[8] = jj_gen;
                    jj_consume_token(-1);
                    throw new ParseException();
                }
                jjtree.closeNodeScope(jjtn000, true);
                jjtc000 = false;
                jjtn000.jjtSetValue(t.image);
            } finally {
                if (jjtc000) {
                    jjtree.closeNodeScope(jjtn000, true);
                }
            }
        } finally {
            trace_return("operator");
        }
    }

    final public void var() throws ParseException {
        trace_call("var");
        try {
            /* @bgen(jjtree) var */
            ASTvar jjtn000 = new ASTvar(JJTVAR);
            boolean jjtc000 = true;
            jjtree.openNodeScope(jjtn000);
            Token t;
            try {
                t = jj_consume_token(IDENTIFIER);
                jjtree.closeNodeScope(jjtn000, true);
                jjtc000 = false;
                jjtn000.jjtSetValue(LiTuple.of(context.getType(t.image), t.image));
            } finally {
                if (jjtc000) {
                    jjtree.closeNodeScope(jjtn000, true);
                }
            }
        } finally {
            trace_return("var");
        }
    }

    // test
    final public SimpleNode test() throws ParseException {
        trace_call("test");
        try {
            /* @bgen(jjtree) test */
            ASTtest jjtn000 = new ASTtest(JJTTEST);
            boolean jjtc000 = true;
            jjtree.openNodeScope(jjtn000);
            try {
                switch ((jj_ntk == -1) ? jj_ntk_f() : jj_ntk) {
                case INT:
                case DOUBLE:
                case PERCENT:
                case TIME: {
                    num();
                    break;
                }
                default:
                    jj_la1[9] = jj_gen;
                    if (jj_2_1(2)) {
                        expr();
                    } else {
                        switch ((jj_ntk == -1) ? jj_ntk_f() : jj_ntk) {
                        case IDENTIFIER: {
                            var();
                            break;
                        }
                        default:
                            jj_la1[10] = jj_gen;
                            jj_consume_token(-1);
                            throw new ParseException();
                        }
                    }
                }
                jj_consume_token(0);
                jjtree.closeNodeScope(jjtn000, true);
                jjtc000 = false;
                {
                    if ("" != null)
                        return jjtn000;
                }
            } catch (Throwable jjte000) {
                if (jjtc000) {
                    jjtree.clearNodeScope(jjtn000);
                    jjtc000 = false;
                } else {
                    jjtree.popNode();
                }
                if (jjte000 instanceof RuntimeException) {
                    {
                        if (true)
                            throw (RuntimeException) jjte000;
                    }
                }
                if (jjte000 instanceof ParseException) {
                    {
                        if (true)
                            throw (ParseException) jjte000;
                    }
                }
                {
                    if (true)
                        throw (Error) jjte000;
                }
            } finally {
                if (jjtc000) {
                    jjtree.closeNodeScope(jjtn000, true);
                }
            }
            throw new Error("Missing return statement in function");
        } finally {
            trace_return("test");
        }
    }

    private boolean jj_2_1(int xla) {
        jj_la = xla;
        jj_lastpos = jj_scanpos = token;
        try {
            return (!jj_3_1());
        } catch (LookaheadSuccess ls) {
            return true;
        } finally {
            jj_save(0, xla);
        }
    }

    private boolean jj_3R_expr_80_10_12() {
        if (jj_scan_token(OR))
            return true;
        return false;
    }

    private boolean jj_3R_expr_78_10_11() {
        if (jj_scan_token(AND))
            return true;
        return false;
    }

    private boolean jj_3R_expr_78_10_5() {
        Token xsp;
        xsp = jj_scanpos;
        if (jj_3R_expr_78_10_11()) {
            jj_scanpos = xsp;
            if (jj_3R_expr_80_10_12())
                return true;
        }
        return false;
    }

    private boolean jj_3R_expr_77_5_3() {
        if (jj_3R_term_84_10_4())
            return true;
        Token xsp;
        while (true) {
            xsp = jj_scanpos;
            if (jj_3R_expr_78_10_5()) {
                jj_scanpos = xsp;
                break;
            }
        }
        return false;
    }

    private boolean jj_3R_var_123_4_14() {
        if (jj_scan_token(IDENTIFIER))
            return true;
        return false;
    }

    private boolean jj_3R_operator_119_7_16() {
        Token xsp;
        xsp = jj_scanpos;
        if (jj_scan_token(19)) {
            jj_scanpos = xsp;
            if (jj_scan_token(20)) {
                jj_scanpos = xsp;
                if (jj_scan_token(15)) {
                    jj_scanpos = xsp;
                    if (jj_scan_token(18)) {
                        jj_scanpos = xsp;
                        if (jj_scan_token(16)) {
                            jj_scanpos = xsp;
                            if (jj_scan_token(17))
                                return true;
                        }
                    }
                }
            }
        }
        return false;
    }

    private boolean jj_3R_compare_114_11_15() {
        Token xsp;
        xsp = jj_scanpos;
        if (jj_scan_token(26)) {
            jj_scanpos = xsp;
            if (jj_scan_token(27))
                return true;
        }
        return false;
    }

    private boolean jj_3R_term_88_10_10() {
        if (jj_3R_compare_114_5_13())
            return true;
        return false;
    }

    private boolean jj_3R_term_87_10_9() {
        if (jj_scan_token(LPAREN))
            return true;
        if (jj_3R_expr_77_5_3())
            return true;
        return false;
    }

    private boolean jj_3R_compare_114_5_13() {
        if (jj_3R_var_123_4_14())
            return true;
        Token xsp;
        xsp = jj_scanpos;
        if (jj_3R_compare_114_11_15())
            jj_scanpos = xsp;
        if (jj_3R_operator_119_7_16())
            return true;
        return false;
    }

    private boolean jj_3R_term_86_10_8() {
        if (jj_scan_token(NOT))
            return true;
        if (jj_3R_term_84_10_4())
            return true;
        return false;
    }

    private boolean jj_3_1() {
        if (jj_3R_expr_77_5_3())
            return true;
        return false;
    }

    private boolean jj_3R_term_85_10_7() {
        if (jj_scan_token(FALSE))
            return true;
        return false;
    }

    private boolean jj_3R_term_84_10_4() {
        Token xsp;
        xsp = jj_scanpos;
        if (jj_3R_term_84_10_6()) {
            jj_scanpos = xsp;
            if (jj_3R_term_85_10_7()) {
                jj_scanpos = xsp;
                if (jj_3R_term_86_10_8()) {
                    jj_scanpos = xsp;
                    if (jj_3R_term_87_10_9()) {
                        jj_scanpos = xsp;
                        if (jj_3R_term_88_10_10())
                            return true;
                    }
                }
            }
        }
        return false;
    }

    private boolean jj_3R_term_84_10_6() {
        if (jj_scan_token(TRUE))
            return true;
        return false;
    }

    /** Generated Token Manager. */
    public RuleParserTokenManager token_source;
    SimpleCharStream jj_input_stream;
    /** Current token. */
    public Token token;
    /** Next token. */
    public Token jj_nt;
    private int jj_ntk;
    private Token jj_scanpos, jj_lastpos;
    private int jj_la;
    private int jj_gen;
    final private int[] jj_la1 = new int[11];
    static private int[] jj_la1_0;
    static {
        jj_la1_init_0();
    }

    private static void jj_la1_init_0() {
        jj_la1_0 = new int[] { 0x2000000, 0x300, 0x300, 0x12004c0, 0x7800, 0xc000000, 0x1007800, 0xc000000, 0x1f8000,
                0x7800, 0x1000000, };
    }

    final private JJCalls[] jj_2_rtns = new JJCalls[1];
    private boolean jj_rescan = false;
    private int jj_gc = 0;

    {
        enable_tracing();
    }

    /** Constructor with InputStream. */
    public RuleParser(java.io.InputStream stream) {
        this(stream, null);
    }

    /** Constructor with InputStream and supplied encoding */
    public RuleParser(java.io.InputStream stream, String encoding) {
        try {
            jj_input_stream = new SimpleCharStream(stream, encoding, 1, 1);
        } catch (java.io.UnsupportedEncodingException e) {
            throw new RuntimeException(e);
        }
        token_source = new RuleParserTokenManager(jj_input_stream);
        token = new Token();
        jj_ntk = -1;
        jj_gen = 0;
        for (int i = 0; i < 11; i++)
            jj_la1[i] = -1;
        for (int i = 0; i < jj_2_rtns.length; i++)
            jj_2_rtns[i] = new JJCalls();
    }

    /** Reinitialise. */
    public void ReInit(java.io.InputStream stream) {
        ReInit(stream, null);
    }

    /** Reinitialise. */
    public void ReInit(java.io.InputStream stream, String encoding) {
        try {
            jj_input_stream.ReInit(stream, encoding, 1, 1);
        } catch (java.io.UnsupportedEncodingException e) {
            throw new RuntimeException(e);
        }
        token_source.ReInit(jj_input_stream);
        token = new Token();
        jj_ntk = -1;
        jjtree.reset();
        jj_gen = 0;
        for (int i = 0; i < 11; i++)
            jj_la1[i] = -1;
        for (int i = 0; i < jj_2_rtns.length; i++)
            jj_2_rtns[i] = new JJCalls();
    }

    /** Constructor. */
    public RuleParser(java.io.Reader stream) {
        jj_input_stream = new SimpleCharStream(stream, 1, 1);
        token_source = new RuleParserTokenManager(jj_input_stream);
        token = new Token();
        jj_ntk = -1;
        jj_gen = 0;
        for (int i = 0; i < 11; i++)
            jj_la1[i] = -1;
        for (int i = 0; i < jj_2_rtns.length; i++)
            jj_2_rtns[i] = new JJCalls();
    }

    /** Reinitialise. */
    public void ReInit(java.io.Reader stream) {
        if (jj_input_stream == null) {
            jj_input_stream = new SimpleCharStream(stream, 1, 1);
        } else {
            jj_input_stream.ReInit(stream, 1, 1);
        }
        if (token_source == null) {
            token_source = new RuleParserTokenManager(jj_input_stream);
        }

        token_source.ReInit(jj_input_stream);
        token = new Token();
        jj_ntk = -1;
        jjtree.reset();
        jj_gen = 0;
        for (int i = 0; i < 11; i++)
            jj_la1[i] = -1;
        for (int i = 0; i < jj_2_rtns.length; i++)
            jj_2_rtns[i] = new JJCalls();
    }

    /** Constructor with generated Token Manager. */
    public RuleParser(RuleParserTokenManager tm) {
        token_source = tm;
        token = new Token();
        jj_ntk = -1;
        jj_gen = 0;
        for (int i = 0; i < 11; i++)
            jj_la1[i] = -1;
        for (int i = 0; i < jj_2_rtns.length; i++)
            jj_2_rtns[i] = new JJCalls();
    }

    /** Reinitialise. */
    public void ReInit(RuleParserTokenManager tm) {
        token_source = tm;
        token = new Token();
        jj_ntk = -1;
        jjtree.reset();
        jj_gen = 0;
        for (int i = 0; i < 11; i++)
            jj_la1[i] = -1;
        for (int i = 0; i < jj_2_rtns.length; i++)
            jj_2_rtns[i] = new JJCalls();
    }

    private Token jj_consume_token(int kind) throws ParseException {
        Token oldToken;
        if ((oldToken = token).next != null)
            token = token.next;
        else
            token = token.next = token_source.getNextToken();
        jj_ntk = -1;
        if (token.kind == kind) {
            jj_gen++;
            if (++jj_gc > 100) {
                jj_gc = 0;
                for (int i = 0; i < jj_2_rtns.length; i++) {
                    JJCalls c = jj_2_rtns[i];
                    while (c != null) {
                        if (c.gen < jj_gen)
                            c.first = null;
                        c = c.next;
                    }
                }
            }
            trace_token(token, "");
            return token;
        }
        token = oldToken;
        jj_kind = kind;
        throw generateParseException();
    }

    @SuppressWarnings("serial")
    static private final class LookaheadSuccess extends java.lang.Error {
        @Override
        public Throwable fillInStackTrace() {
            return this;
        }
    }

    static private final LookaheadSuccess jj_ls = new LookaheadSuccess();

    private boolean jj_scan_token(int kind) {
        if (jj_scanpos == jj_lastpos) {
            jj_la--;
            if (jj_scanpos.next == null) {
                jj_lastpos = jj_scanpos = jj_scanpos.next = token_source.getNextToken();
            } else {
                jj_lastpos = jj_scanpos = jj_scanpos.next;
            }
        } else {
            jj_scanpos = jj_scanpos.next;
        }
        if (jj_rescan) {
            int i = 0;
            Token tok = token;
            while (tok != null && tok != jj_scanpos) {
                i++;
                tok = tok.next;
            }
            if (tok != null)
                jj_add_error_token(kind, i);
        }
        if (jj_scanpos.kind != kind)
            return true;
        if (jj_la == 0 && jj_scanpos == jj_lastpos)
            throw jj_ls;
        return false;
    }

    /** Get the next Token. */
    final public Token getNextToken() {
        if (token.next != null)
            token = token.next;
        else
            token = token.next = token_source.getNextToken();
        jj_ntk = -1;
        jj_gen++;
        trace_token(token, " (in getNextToken)");
        return token;
    }

    /** Get the specific Token. */
    final public Token getToken(int index) {
        Token t = token;
        for (int i = 0; i < index; i++) {
            if (t.next != null)
                t = t.next;
            else
                t = t.next = token_source.getNextToken();
        }
        return t;
    }

    private int jj_ntk_f() {
        if ((jj_nt = token.next) == null)
            return (jj_ntk = (token.next = token_source.getNextToken()).kind);
        else
            return (jj_ntk = jj_nt.kind);
    }

    private java.util.List<int[]> jj_expentries = new java.util.ArrayList<int[]>();
    private int[] jj_expentry;
    private int jj_kind = -1;
    private int[] jj_lasttokens = new int[100];
    private int jj_endpos;

    private void jj_add_error_token(int kind, int pos) {
        if (pos >= 100) {
            return;
        }

        if (pos == jj_endpos + 1) {
            jj_lasttokens[jj_endpos++] = kind;
        } else if (jj_endpos != 0) {
            jj_expentry = new int[jj_endpos];

            for (int i = 0; i < jj_endpos; i++) {
                jj_expentry[i] = jj_lasttokens[i];
            }

            for (int[] oldentry : jj_expentries) {
                if (oldentry.length == jj_expentry.length) {
                    boolean isMatched = true;

                    for (int i = 0; i < jj_expentry.length; i++) {
                        if (oldentry[i] != jj_expentry[i]) {
                            isMatched = false;
                            break;
                        }

                    }
                    if (isMatched) {
                        jj_expentries.add(jj_expentry);
                        break;
                    }
                }
            }

            if (pos != 0) {
                jj_lasttokens[(jj_endpos = pos) - 1] = kind;
            }
        }
    }

    /** Generate ParseException. */
    public ParseException generateParseException() {
        jj_expentries.clear();
        boolean[] la1tokens = new boolean[28];
        if (jj_kind >= 0) {
            la1tokens[jj_kind] = true;
            jj_kind = -1;
        }
        for (int i = 0; i < 11; i++) {
            if (jj_la1[i] == jj_gen) {
                for (int j = 0; j < 32; j++) {
                    if ((jj_la1_0[i] & (1 << j)) != 0) {
                        la1tokens[j] = true;
                    }
                }
            }
        }
        for (int i = 0; i < 28; i++) {
            if (la1tokens[i]) {
                jj_expentry = new int[1];
                jj_expentry[0] = i;
                jj_expentries.add(jj_expentry);
            }
        }
        jj_endpos = 0;
        jj_rescan_token();
        jj_add_error_token(0, 0);
        int[][] exptokseq = new int[jj_expentries.size()][];
        for (int i = 0; i < jj_expentries.size(); i++) {
            exptokseq[i] = jj_expentries.get(i);
        }
        return new ParseException(token, exptokseq, tokenImage);
    }

    private boolean trace_enabled;

    /** Trace enabled. */
    final public boolean trace_enabled() {
        return trace_enabled;
    }

    private int trace_indent = 0;

    /** Enable tracing. */
    final public void enable_tracing() {
        trace_enabled = true;
    }

    /** Disable tracing. */
    final public void disable_tracing() {
        trace_enabled = false;
    }

    protected void trace_call(String s) {
        if (trace_enabled) {
            for (int i = 0; i < trace_indent; i++) {
                System.out.print(" ");
            }
            System.out.println("Call:	" + s);
        }
        trace_indent = trace_indent + 2;
    }

    protected void trace_return(String s) {
        trace_indent = trace_indent - 2;
        if (trace_enabled) {
            for (int i = 0; i < trace_indent; i++) {
                System.out.print(" ");
            }
            System.out.println("Return: " + s);
        }
    }

    protected void trace_token(Token t, String where) {
        if (trace_enabled) {
            for (int i = 0; i < trace_indent; i++) {
                System.out.print(" ");
            }
            System.out.print("Consumed token: <" + tokenImage[t.kind]);
            if (t.kind != 0 && !tokenImage[t.kind].equals("\"" + t.image + "\"")) {
                System.out.print(": \"" + TokenMgrError.addEscapes(t.image) + "\"");
            }
            System.out.println(" at line " + t.beginLine + " column " + t.beginColumn + ">" + where);
        }
    }

    protected void trace_scan(Token t1, int t2) {
        if (trace_enabled) {
            for (int i = 0; i < trace_indent; i++) {
                System.out.print(" ");
            }
            System.out.print("Visited token: <" + tokenImage[t1.kind]);
            if (t1.kind != 0 && !tokenImage[t1.kind].equals("\"" + t1.image + "\"")) {
                System.out.print(": \"" + TokenMgrError.addEscapes(t1.image) + "\"");
            }
            System.out.println(" at line " + t1.beginLine + " column " + t1.beginColumn + ">; Expected token: <"
                    + tokenImage[t2] + ">");
        }
    }

    private void jj_rescan_token() {
        jj_rescan = true;
        for (int i = 0; i < 1; i++) {
            try {
                JJCalls p = jj_2_rtns[i];

                do {
                    if (p.gen > jj_gen) {
                        jj_la = p.arg;
                        jj_lastpos = jj_scanpos = p.first;
                        switch (i) {
                        case 0:
                            jj_3_1();
                            break;
                        }
                    }
                    p = p.next;
                } while (p != null);

            } catch (LookaheadSuccess ls) {
            }
        }
        jj_rescan = false;
    }

    private void jj_save(int index, int xla) {
        JJCalls p = jj_2_rtns[index];
        while (p.gen > jj_gen) {
            if (p.next == null) {
                p = p.next = new JJCalls();
                break;
            }
            p = p.next;
        }

        p.gen = jj_gen + xla - jj_la;
        p.first = token;
        p.arg = xla;
    }

    static final class JJCalls {
        int gen;
        Token first;
        int arg;
        JJCalls next;
    }

}

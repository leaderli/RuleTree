/* RuleParser.java */
/* Generated By:JJTree&JavaCC: Do not edit this line. RuleParser.java */
package io.leaderli.rule.tree;

import java.util.Arrays;

import io.leaderli.litool.core.exception.LiAssertUtil;
import io.leaderli.litool.core.meta.LiTuple;
import io.leaderli.litool.core.text.StringUtils;
import io.leaderli.rule.NodeUtil;
import java.io.StringReader;
import io.leaderli.rule.RuleContext;

public class RuleParser/* @bgen(jjtree) */ implements RuleParserTreeConstants, RuleParserConstants {/* @bgen(jjtree) */
    protected JJTRuleParserState jjtree = new JJTRuleParserState();
    private RuleContext context;

    public void setRuleContext(RuleContext context) {
        this.context = context;
    }

    public RuleParser(String rule) {
        this(new StringReader(rule));
        this.context = new RuleContext();
    }

    public RuleParser(String rule, RuleContext context) {
        this(new StringReader(rule));
        this.context = context;
    }

    final public SimpleNode Start() throws ParseException {/* @bgen(jjtree) Start */
        ast_Start jjtn000 = new ast_Start(JJTSTART);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);
        try {
            label_1: while (true) {
                rule();
                switch ((jj_ntk == -1) ? jj_ntk_f() : jj_ntk) {
                case 27: {
                    ;
                    break;
                }
                default:
                    jj_la1[0] = jj_gen;
                    break label_1;
                }
            }
            jj_consume_token(0);
            jjtree.closeNodeScope(jjtn000, true);
            jjtc000 = false;
            {
                if ("" != null)
                    return jjtn000;
            }
        } catch (Throwable jjte000) {
            if (jjtc000) {
                jjtree.clearNodeScope(jjtn000);
                jjtc000 = false;
            } else {
                jjtree.popNode();
            }
            if (jjte000 instanceof RuntimeException) {
                {
                    if (true)
                        throw (RuntimeException) jjte000;
                }
            }
            if (jjte000 instanceof ParseException) {
                {
                    if (true)
                        throw (ParseException) jjte000;
                }
            }
            {
                if (true)
                    throw (Error) jjte000;
            }
        } finally {
            if (jjtc000) {
                jjtree.closeNodeScope(jjtn000, true);
            }
        }
        throw new Error("Missing return statement in function");
    }

    final public void rule() throws ParseException {/* @bgen(jjtree) rule */
        ast_rule jjtn000 = new ast_rule(JJTRULE);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);
        Token t;
        try {
            jj_consume_token(27);
            t = jj_consume_token(INT);
            int rule = Integer.parseInt(t.image);
            context.isValidRule(rule);
            jjtn000.jjtSetValue(rule);
            expr();
        } catch (Throwable jjte000) {
            if (jjtc000) {
                jjtree.clearNodeScope(jjtn000);
                jjtc000 = false;
            } else {
                jjtree.popNode();
            }
            if (jjte000 instanceof RuntimeException) {
                {
                    if (true)
                        throw (RuntimeException) jjte000;
                }
            }
            if (jjte000 instanceof ParseException) {
                {
                    if (true)
                        throw (ParseException) jjte000;
                }
            }
            {
                if (true)
                    throw (Error) jjte000;
            }
        } finally {
            if (jjtc000) {
                jjtree.closeNodeScope(jjtn000, true);
            }
        }
    }

    final public void expr() throws ParseException {
        term();
        label_2: while (true) {
            switch ((jj_ntk == -1) ? jj_ntk_f() : jj_ntk) {
            case AND:
            case OR: {
                ;
                break;
            }
            default:
                jj_la1[1] = jj_gen;
                break label_2;
            }
            switch ((jj_ntk == -1) ? jj_ntk_f() : jj_ntk) {
            case AND: {
                ast_and jjtn001 = new ast_and(JJTAND);
                boolean jjtc001 = true;
                jjtree.openNodeScope(jjtn001);
                try {
                    jj_consume_token(AND);
                } finally {
                    if (jjtc001) {
                        jjtree.closeNodeScope(jjtn001, true);
                    }
                }
                term();
                break;
            }
            case OR: {
                ast_or jjtn002 = new ast_or(JJTOR);
                boolean jjtc002 = true;
                jjtree.openNodeScope(jjtn002);
                try {
                    jj_consume_token(OR);
                } finally {
                    if (jjtc002) {
                        jjtree.closeNodeScope(jjtn002, true);
                    }
                }
                term();
                break;
            }
            default:
                jj_la1[2] = jj_gen;
                jj_consume_token(-1);
                throw new ParseException();
            }
        }
    }

    final public void term() throws ParseException {/* @bgen(jjtree) term */
        ast_term jjtn000 = new ast_term(JJTTERM);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);
        try {
            switch ((jj_ntk == -1) ? jj_ntk_f() : jj_ntk) {
            case TRUE: {
                jj_consume_token(TRUE);
                jjtree.closeNodeScope(jjtn000, true);
                jjtc000 = false;
                jjtn000.jjtSetValue(true);
                break;
            }
            case FALSE: {
                jj_consume_token(FALSE);
                jjtree.closeNodeScope(jjtn000, true);
                jjtc000 = false;
                jjtn000.jjtSetValue(false);
                break;
            }
            case NOT: {
                jj_consume_token(NOT);
                ast_neg jjtn001 = new ast_neg(JJTNEG);
                boolean jjtc001 = true;
                jjtree.openNodeScope(jjtn001);
                try {
                    term();
                } catch (Throwable jjte001) {
                    if (jjtc001) {
                        jjtree.clearNodeScope(jjtn001);
                        jjtc001 = false;
                    } else {
                        jjtree.popNode();
                    }
                    if (jjte001 instanceof RuntimeException) {
                        {
                            if (true)
                                throw (RuntimeException) jjte001;
                        }
                    }
                    if (jjte001 instanceof ParseException) {
                        {
                            if (true)
                                throw (ParseException) jjte001;
                        }
                    }
                    {
                        if (true)
                            throw (Error) jjte001;
                    }
                } finally {
                    if (jjtc001) {
                        jjtree.closeNodeScope(jjtn001, true);
                    }
                }
                break;
            }
            case LPAREN: {
                jj_consume_token(LPAREN);
                expr();
                jj_consume_token(RPAREN);
                jjtree.closeNodeScope(jjtn000, true);
                jjtc000 = false;
                jjtn000.jjtSetValue("()");
                break;
            }
            case IDENTIFIER: {
                compare();
                break;
            }
            default:
                jj_la1[3] = jj_gen;
                jj_consume_token(-1);
                throw new ParseException();
            }
        } catch (Throwable jjte000) {
            if (jjtc000) {
                jjtree.clearNodeScope(jjtn000);
                jjtc000 = false;
            } else {
                jjtree.popNode();
            }
            if (jjte000 instanceof RuntimeException) {
                {
                    if (true)
                        throw (RuntimeException) jjte000;
                }
            }
            if (jjte000 instanceof ParseException) {
                {
                    if (true)
                        throw (ParseException) jjte000;
                }
            }
            {
                if (true)
                    throw (Error) jjte000;
            }
        } finally {
            if (jjtc000) {
                jjtree.closeNodeScope(jjtn000, true);
            }
        }
    }

    final public void num_int() throws ParseException {/* @bgen(jjtree) num_int */
        ast_num_int jjtn000 = new ast_num_int(JJTNUM_INT);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);
        Token t;
        try {
            t = jj_consume_token(INT);
            jjtree.closeNodeScope(jjtn000, true);
            jjtc000 = false;
            jjtn000.jjtSetValue(LiTuple.of("INT", Integer.parseInt(t.image)));
        } finally {
            if (jjtc000) {
                jjtree.closeNodeScope(jjtn000, true);
            }
        }
    }

    final public void num_double() throws ParseException {/* @bgen(jjtree) num_double */
        ast_num_double jjtn000 = new ast_num_double(JJTNUM_DOUBLE);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);
        Token t;
        try {
            t = jj_consume_token(DOUBLE);
            jjtree.closeNodeScope(jjtn000, true);
            jjtc000 = false;
            jjtn000.jjtSetValue(LiTuple.of("DOUBLE", Double.parseDouble(t.image)));
        } finally {
            if (jjtc000) {
                jjtree.closeNodeScope(jjtn000, true);
            }
        }
    }

    final public void num_percent() throws ParseException {/* @bgen(jjtree) num_percent */
        ast_num_percent jjtn000 = new ast_num_percent(JJTNUM_PERCENT);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);
        Token t;
        try {
            t = jj_consume_token(PERCENT);
            jjtree.closeNodeScope(jjtn000, true);
            jjtc000 = false;
            jjtn000.jjtSetValue(LiTuple.of("PERCENT", Double.parseDouble(t.image.replace("%", "")) / 100));
        } finally {
            if (jjtc000) {
                jjtree.closeNodeScope(jjtn000, true);
            }
        }
    }

    final public void num_time() throws ParseException {/* @bgen(jjtree) num_time */
        ast_num_time jjtn000 = new ast_num_time(JJTNUM_TIME);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);
        Token t;
        try {
            t = jj_consume_token(TIME);
            jjtree.closeNodeScope(jjtn000, true);
            jjtc000 = false;
            jjtn000.jjtSetValue(LiTuple.of("TIME", t.image));
        } finally {
            if (jjtc000) {
                jjtree.closeNodeScope(jjtn000, true);
            }
        }
    }

    final public void num() throws ParseException {
        switch ((jj_ntk == -1) ? jj_ntk_f() : jj_ntk) {
        case INT: {
            num_int();
            break;
        }
        case DOUBLE: {
            num_double();
            break;
        }
        case PERCENT: {
            num_percent();
            break;
        }
        case TIME: {
            num_time();
            break;
        }
        default:
            jj_la1[4] = jj_gen;
            jj_consume_token(-1);
            throw new ParseException();
        }
    }

    final public void compare() throws ParseException {/* @bgen(jjtree) compare */
        ast_compare jjtn000 = new ast_compare(JJTCOMPARE);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);
        Token name;
        String type;
        try {
            var();
            type = NodeUtil.getCurrentChildrenNumNodeType(jjtree);
            switch ((jj_ntk == -1) ? jj_ntk_f() : jj_ntk) {
            case PLUS:
            case MINUS: {
                math();
                switch ((jj_ntk == -1) ? jj_ntk_f() : jj_ntk) {
                case INT:
                case DOUBLE:
                case PERCENT:
                case TIME: {
                    num();
                    break;
                }
                case IDENTIFIER: {
                    var();
                    break;
                }
                default:
                    jj_la1[5] = jj_gen;
                    jj_consume_token(-1);
                    throw new ParseException();
                }
                LiAssertUtil.assertTrue(StringUtils.equalsAny(type, "INT", "DOUBLE"),
                        "only <INT>,<DOUBLE> support '+','-");
                LiAssertUtil.assertTrue(StringUtils.equalsAny(type, NodeUtil.getCurrentChildrenNumNodeType(jjtree)),
                        "should use type <" + type + ">");
                break;
            }
            default:
                jj_la1[6] = jj_gen;
                ;
            }
            operator();
            // STR 只允许使用 '=' '!='
            if ("STR".equals(type)) {
                int operator = NodeUtil.getCurrentChildrenOperatorNodeValue(jjtree);
                LiAssertUtil.assertTrue(operator == EQ || operator == NE, "<STR> only support '=','!=");
            }
            num();
            // STR 兼容其他类型，不做类型校验
            if (!"STR".equals(type)) {
                LiAssertUtil.assertTrue(StringUtils.equalsAny(type, NodeUtil.getCurrentChildrenNumNodeType(jjtree)),
                        "should use type <" + type + ">");
            }
            jjtree.closeNodeScope(jjtn000, true);
            jjtc000 = false;

        } catch (Throwable jjte000) {
            if (jjtc000) {
                jjtree.clearNodeScope(jjtn000);
                jjtc000 = false;
            } else {
                jjtree.popNode();
            }
            if (jjte000 instanceof RuntimeException) {
                {
                    if (true)
                        throw (RuntimeException) jjte000;
                }
            }
            if (jjte000 instanceof ParseException) {
                {
                    if (true)
                        throw (ParseException) jjte000;
                }
            }
            {
                if (true)
                    throw (Error) jjte000;
            }
        } finally {
            if (jjtc000) {
                jjtree.closeNodeScope(jjtn000, true);
            }
        }
    }

    // noinspection unchecked
    final public void math() throws ParseException {/* @bgen(jjtree) math */
        ast_math jjtn000 = new ast_math(JJTMATH);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);
        try {
            switch ((jj_ntk == -1) ? jj_ntk_f() : jj_ntk) {
            case PLUS: {
                jj_consume_token(PLUS);
                jjtree.closeNodeScope(jjtn000, true);
                jjtc000 = false;
                jjtn000.jjtSetValue(PLUS);
                break;
            }
            case MINUS: {
                jj_consume_token(MINUS);
                jjtree.closeNodeScope(jjtn000, true);
                jjtc000 = false;
                jjtn000.jjtSetValue(MINUS);
                break;
            }
            default:
                jj_la1[7] = jj_gen;
                jj_consume_token(-1);
                throw new ParseException();
            }
        } finally {
            if (jjtc000) {
                jjtree.closeNodeScope(jjtn000, true);
            }
        }
    }

    final public void operator() throws ParseException {/* @bgen(jjtree) operator */
        ast_operator jjtn000 = new ast_operator(JJTOPERATOR);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);
        try {
            switch ((jj_ntk == -1) ? jj_ntk_f() : jj_ntk) {
            case EQ: {
                jj_consume_token(EQ);
                jjtree.closeNodeScope(jjtn000, true);
                jjtc000 = false;
                jjtn000.jjtSetValue(EQ);
                break;
            }
            case NE: {
                jj_consume_token(NE);
                jjtree.closeNodeScope(jjtn000, true);
                jjtc000 = false;
                jjtn000.jjtSetValue(NE);
                break;
            }
            case GT: {
                jj_consume_token(GT);
                jjtree.closeNodeScope(jjtn000, true);
                jjtc000 = false;
                jjtn000.jjtSetValue(GT);
                break;
            }
            case GE: {
                jj_consume_token(GE);
                jjtree.closeNodeScope(jjtn000, true);
                jjtc000 = false;
                jjtn000.jjtSetValue(GE);
                break;
            }
            case LT: {
                jj_consume_token(LT);
                jjtree.closeNodeScope(jjtn000, true);
                jjtc000 = false;
                jjtn000.jjtSetValue(LT);
                break;
            }
            case LE: {
                jj_consume_token(LE);
                jjtree.closeNodeScope(jjtn000, true);
                jjtc000 = false;
                jjtn000.jjtSetValue(LE);
                break;
            }
            default:
                jj_la1[8] = jj_gen;
                jj_consume_token(-1);
                throw new ParseException();
            }
        } finally {
            if (jjtc000) {
                jjtree.closeNodeScope(jjtn000, true);
            }
        }
    }

    final public void var() throws ParseException {/* @bgen(jjtree) var */
        ast_var jjtn000 = new ast_var(JJTVAR);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);
        Token t;
        try {
            t = jj_consume_token(IDENTIFIER);
            jjtree.closeNodeScope(jjtn000, true);
            jjtc000 = false;
            jjtn000.jjtSetValue(LiTuple.of(context.getType(t.image), t.image));
        } finally {
            if (jjtc000) {
                jjtree.closeNodeScope(jjtn000, true);
            }
        }
    }

    // test
    final public SimpleNode test() throws ParseException {/* @bgen(jjtree) test */
        ast_test jjtn000 = new ast_test(JJTTEST);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);
        try {
            switch ((jj_ntk == -1) ? jj_ntk_f() : jj_ntk) {
            case INT:
            case DOUBLE:
            case PERCENT:
            case TIME: {
                num();
                break;
            }
            default:
                jj_la1[9] = jj_gen;
                if (jj_2_1(2)) {
                    expr();
                } else {
                    switch ((jj_ntk == -1) ? jj_ntk_f() : jj_ntk) {
                    case IDENTIFIER: {
                        var();
                        break;
                    }
                    default:
                        jj_la1[10] = jj_gen;
                        jj_consume_token(-1);
                        throw new ParseException();
                    }
                }
            }
            jj_consume_token(0);
            jjtree.closeNodeScope(jjtn000, true);
            jjtc000 = false;
            {
                if ("" != null)
                    return jjtn000;
            }
        } catch (Throwable jjte000) {
            if (jjtc000) {
                jjtree.clearNodeScope(jjtn000);
                jjtc000 = false;
            } else {
                jjtree.popNode();
            }
            if (jjte000 instanceof RuntimeException) {
                {
                    if (true)
                        throw (RuntimeException) jjte000;
                }
            }
            if (jjte000 instanceof ParseException) {
                {
                    if (true)
                        throw (ParseException) jjte000;
                }
            }
            {
                if (true)
                    throw (Error) jjte000;
            }
        } finally {
            if (jjtc000) {
                jjtree.closeNodeScope(jjtn000, true);
            }
        }
        throw new Error("Missing return statement in function");
    }

    private boolean jj_2_1(int xla) {
        jj_la = xla;
        jj_lastpos = jj_scanpos = token;
        try {
            return (!jj_3_1());
        } catch (LookaheadSuccess ls) {
            return true;
        } finally {
            jj_save(0, xla);
        }
    }

    private boolean jj_3R_compare_127_6_15() {
        if (jj_3R_math_157_7_17())
            return true;
        return false;
    }

    private boolean jj_3R_var_172_5_14() {
        if (jj_scan_token(IDENTIFIER))
            return true;
        return false;
    }

    private boolean jj_3R_operator_168_7_23() {
        if (jj_scan_token(LE))
            return true;
        return false;
    }

    private boolean jj_3R_compare_123_5_13() {
        if (jj_3R_var_172_5_14())
            return true;
        Token xsp;
        xsp = jj_scanpos;
        if (jj_3R_compare_127_6_15())
            jj_scanpos = xsp;
        if (jj_3R_operator_163_7_16())
            return true;
        return false;
    }

    private boolean jj_3R_operator_167_7_22() {
        if (jj_scan_token(LT))
            return true;
        return false;
    }

    private boolean jj_3R_operator_166_7_21() {
        if (jj_scan_token(GE))
            return true;
        return false;
    }

    private boolean jj_3R_operator_165_7_20() {
        if (jj_scan_token(GT))
            return true;
        return false;
    }

    private boolean jj_3R_operator_164_7_19() {
        if (jj_scan_token(NE))
            return true;
        return false;
    }

    private boolean jj_3R_operator_163_7_16() {
        Token xsp;
        xsp = jj_scanpos;
        if (jj_3R_operator_163_7_18()) {
            jj_scanpos = xsp;
            if (jj_3R_operator_164_7_19()) {
                jj_scanpos = xsp;
                if (jj_3R_operator_165_7_20()) {
                    jj_scanpos = xsp;
                    if (jj_3R_operator_166_7_21()) {
                        jj_scanpos = xsp;
                        if (jj_3R_operator_167_7_22()) {
                            jj_scanpos = xsp;
                            if (jj_3R_operator_168_7_23())
                                return true;
                        }
                    }
                }
            }
        }
        return false;
    }

    private boolean jj_3R_operator_163_7_18() {
        if (jj_scan_token(EQ))
            return true;
        return false;
    }

    private boolean jj_3R_math_158_7_25() {
        if (jj_scan_token(MINUS))
            return true;
        return false;
    }

    private boolean jj_3R_math_157_7_24() {
        if (jj_scan_token(PLUS))
            return true;
        return false;
    }

    private boolean jj_3R_math_157_7_17() {
        Token xsp;
        xsp = jj_scanpos;
        if (jj_3R_math_157_7_24()) {
            jj_scanpos = xsp;
            if (jj_3R_math_158_7_25())
                return true;
        }
        return false;
    }

    private boolean jj_3R_term_103_10_10() {
        if (jj_3R_compare_123_5_13())
            return true;
        return false;
    }

    private boolean jj_3R_term_102_10_9() {
        if (jj_scan_token(LPAREN))
            return true;
        if (jj_3R_expr_92_5_3())
            return true;
        return false;
    }

    private boolean jj_3R_term_101_10_8() {
        if (jj_scan_token(NOT))
            return true;
        if (jj_3R_term_99_10_4())
            return true;
        return false;
    }

    private boolean jj_3R_term_100_10_7() {
        if (jj_scan_token(FALSE))
            return true;
        return false;
    }

    private boolean jj_3R_term_99_10_6() {
        if (jj_scan_token(TRUE))
            return true;
        return false;
    }

    private boolean jj_3R_term_99_10_4() {
        Token xsp;
        xsp = jj_scanpos;
        if (jj_3R_term_99_10_6()) {
            jj_scanpos = xsp;
            if (jj_3R_term_100_10_7()) {
                jj_scanpos = xsp;
                if (jj_3R_term_101_10_8()) {
                    jj_scanpos = xsp;
                    if (jj_3R_term_102_10_9()) {
                        jj_scanpos = xsp;
                        if (jj_3R_term_103_10_10())
                            return true;
                    }
                }
            }
        }
        return false;
    }

    private boolean jj_3R_expr_95_10_12() {
        if (jj_scan_token(OR))
            return true;
        return false;
    }

    private boolean jj_3R_expr_93_10_5() {
        Token xsp;
        xsp = jj_scanpos;
        if (jj_3R_expr_93_10_11()) {
            jj_scanpos = xsp;
            if (jj_3R_expr_95_10_12())
                return true;
        }
        return false;
    }

    private boolean jj_3R_expr_93_10_11() {
        if (jj_scan_token(AND))
            return true;
        return false;
    }

    private boolean jj_3R_expr_92_5_3() {
        if (jj_3R_term_99_10_4())
            return true;
        Token xsp;
        while (true) {
            xsp = jj_scanpos;
            if (jj_3R_expr_93_10_5()) {
                jj_scanpos = xsp;
                break;
            }
        }
        return false;
    }

    private boolean jj_3_1() {
        if (jj_3R_expr_92_5_3())
            return true;
        return false;
    }

    /** Generated Token Manager. */
    public RuleParserTokenManager token_source;
    SimpleCharStream jj_input_stream;
    /** Current token. */
    public Token token;
    /** Next token. */
    public Token jj_nt;
    private int jj_ntk;
    private Token jj_scanpos, jj_lastpos;
    private int jj_la;
    private int jj_gen;
    final private int[] jj_la1 = new int[11];
    static private int[] jj_la1_0;
    static {
        jj_la1_init_0();
    }

    private static void jj_la1_init_0() {
        jj_la1_0 = new int[] { 0x8000000, 0x300, 0x300, 0x48004c0, 0x7800, 0x4007800, 0x600000, 0x600000, 0x1f8000,
                0x7800, 0x4000000, };
    }

    final private JJCalls[] jj_2_rtns = new JJCalls[1];
    private boolean jj_rescan = false;
    private int jj_gc = 0;

    /** Constructor with InputStream. */
    public RuleParser(java.io.InputStream stream) {
        this(stream, null);
    }

    /** Constructor with InputStream and supplied encoding */
    public RuleParser(java.io.InputStream stream, String encoding) {
        try {
            jj_input_stream = new SimpleCharStream(stream, encoding, 1, 1);
        } catch (java.io.UnsupportedEncodingException e) {
            throw new RuntimeException(e);
        }
        token_source = new RuleParserTokenManager(jj_input_stream);
        token = new Token();
        jj_ntk = -1;
        jj_gen = 0;
        for (int i = 0; i < 11; i++)
            jj_la1[i] = -1;
        for (int i = 0; i < jj_2_rtns.length; i++)
            jj_2_rtns[i] = new JJCalls();
    }

    /** Reinitialise. */
    public void ReInit(java.io.InputStream stream) {
        ReInit(stream, null);
    }

    /** Reinitialise. */
    public void ReInit(java.io.InputStream stream, String encoding) {
        try {
            jj_input_stream.ReInit(stream, encoding, 1, 1);
        } catch (java.io.UnsupportedEncodingException e) {
            throw new RuntimeException(e);
        }
        token_source.ReInit(jj_input_stream);
        token = new Token();
        jj_ntk = -1;
        jjtree.reset();
        jj_gen = 0;
        for (int i = 0; i < 11; i++)
            jj_la1[i] = -1;
        for (int i = 0; i < jj_2_rtns.length; i++)
            jj_2_rtns[i] = new JJCalls();
    }

    /** Constructor. */
    public RuleParser(java.io.Reader stream) {
        jj_input_stream = new SimpleCharStream(stream, 1, 1);
        token_source = new RuleParserTokenManager(jj_input_stream);
        token = new Token();
        jj_ntk = -1;
        jj_gen = 0;
        for (int i = 0; i < 11; i++)
            jj_la1[i] = -1;
        for (int i = 0; i < jj_2_rtns.length; i++)
            jj_2_rtns[i] = new JJCalls();
    }

    /** Reinitialise. */
    public void ReInit(java.io.Reader stream) {
        if (jj_input_stream == null) {
            jj_input_stream = new SimpleCharStream(stream, 1, 1);
        } else {
            jj_input_stream.ReInit(stream, 1, 1);
        }
        if (token_source == null) {
            token_source = new RuleParserTokenManager(jj_input_stream);
        }

        token_source.ReInit(jj_input_stream);
        token = new Token();
        jj_ntk = -1;
        jjtree.reset();
        jj_gen = 0;
        for (int i = 0; i < 11; i++)
            jj_la1[i] = -1;
        for (int i = 0; i < jj_2_rtns.length; i++)
            jj_2_rtns[i] = new JJCalls();
    }

    /** Constructor with generated Token Manager. */
    public RuleParser(RuleParserTokenManager tm) {
        token_source = tm;
        token = new Token();
        jj_ntk = -1;
        jj_gen = 0;
        for (int i = 0; i < 11; i++)
            jj_la1[i] = -1;
        for (int i = 0; i < jj_2_rtns.length; i++)
            jj_2_rtns[i] = new JJCalls();
    }

    /** Reinitialise. */
    public void ReInit(RuleParserTokenManager tm) {
        token_source = tm;
        token = new Token();
        jj_ntk = -1;
        jjtree.reset();
        jj_gen = 0;
        for (int i = 0; i < 11; i++)
            jj_la1[i] = -1;
        for (int i = 0; i < jj_2_rtns.length; i++)
            jj_2_rtns[i] = new JJCalls();
    }

    private Token jj_consume_token(int kind) throws ParseException {
        Token oldToken;
        if ((oldToken = token).next != null)
            token = token.next;
        else
            token = token.next = token_source.getNextToken();
        jj_ntk = -1;
        if (token.kind == kind) {
            jj_gen++;
            if (++jj_gc > 100) {
                jj_gc = 0;
                for (int i = 0; i < jj_2_rtns.length; i++) {
                    JJCalls c = jj_2_rtns[i];
                    while (c != null) {
                        if (c.gen < jj_gen)
                            c.first = null;
                        c = c.next;
                    }
                }
            }
            return token;
        }
        token = oldToken;
        jj_kind = kind;
        throw generateParseException();
    }

    @SuppressWarnings("serial")
    static private final class LookaheadSuccess extends java.lang.Error {
        @Override
        public Throwable fillInStackTrace() {
            return this;
        }
    }

    static private final LookaheadSuccess jj_ls = new LookaheadSuccess();

    private boolean jj_scan_token(int kind) {
        if (jj_scanpos == jj_lastpos) {
            jj_la--;
            if (jj_scanpos.next == null) {
                jj_lastpos = jj_scanpos = jj_scanpos.next = token_source.getNextToken();
            } else {
                jj_lastpos = jj_scanpos = jj_scanpos.next;
            }
        } else {
            jj_scanpos = jj_scanpos.next;
        }
        if (jj_rescan) {
            int i = 0;
            Token tok = token;
            while (tok != null && tok != jj_scanpos) {
                i++;
                tok = tok.next;
            }
            if (tok != null)
                jj_add_error_token(kind, i);
        }
        if (jj_scanpos.kind != kind)
            return true;
        if (jj_la == 0 && jj_scanpos == jj_lastpos)
            throw jj_ls;
        return false;
    }

    /** Get the next Token. */
    final public Token getNextToken() {
        if (token.next != null)
            token = token.next;
        else
            token = token.next = token_source.getNextToken();
        jj_ntk = -1;
        jj_gen++;
        return token;
    }

    /** Get the specific Token. */
    final public Token getToken(int index) {
        Token t = token;
        for (int i = 0; i < index; i++) {
            if (t.next != null)
                t = t.next;
            else
                t = t.next = token_source.getNextToken();
        }
        return t;
    }

    private int jj_ntk_f() {
        if ((jj_nt = token.next) == null)
            return (jj_ntk = (token.next = token_source.getNextToken()).kind);
        else
            return (jj_ntk = jj_nt.kind);
    }

    private java.util.List<int[]> jj_expentries = new java.util.ArrayList<int[]>();
    private int[] jj_expentry;
    private int jj_kind = -1;
    private int[] jj_lasttokens = new int[100];
    private int jj_endpos;

    private void jj_add_error_token(int kind, int pos) {
        if (pos >= 100) {
            return;
        }

        if (pos == jj_endpos + 1) {
            jj_lasttokens[jj_endpos++] = kind;
        } else if (jj_endpos != 0) {
            jj_expentry = new int[jj_endpos];

            for (int i = 0; i < jj_endpos; i++) {
                jj_expentry[i] = jj_lasttokens[i];
            }

            for (int[] oldentry : jj_expentries) {
                if (oldentry.length == jj_expentry.length) {
                    boolean isMatched = true;

                    for (int i = 0; i < jj_expentry.length; i++) {
                        if (oldentry[i] != jj_expentry[i]) {
                            isMatched = false;
                            break;
                        }

                    }
                    if (isMatched) {
                        jj_expentries.add(jj_expentry);
                        break;
                    }
                }
            }

            if (pos != 0) {
                jj_lasttokens[(jj_endpos = pos) - 1] = kind;
            }
        }
    }

    /** Generate ParseException. */
    public ParseException generateParseException() {
        jj_expentries.clear();
        boolean[] la1tokens = new boolean[28];
        if (jj_kind >= 0) {
            la1tokens[jj_kind] = true;
            jj_kind = -1;
        }
        for (int i = 0; i < 11; i++) {
            if (jj_la1[i] == jj_gen) {
                for (int j = 0; j < 32; j++) {
                    if ((jj_la1_0[i] & (1 << j)) != 0) {
                        la1tokens[j] = true;
                    }
                }
            }
        }
        for (int i = 0; i < 28; i++) {
            if (la1tokens[i]) {
                jj_expentry = new int[1];
                jj_expentry[0] = i;
                jj_expentries.add(jj_expentry);
            }
        }
        jj_endpos = 0;
        jj_rescan_token();
        jj_add_error_token(0, 0);
        int[][] exptokseq = new int[jj_expentries.size()][];
        for (int i = 0; i < jj_expentries.size(); i++) {
            exptokseq[i] = jj_expentries.get(i);
        }
        return new ParseException(token, exptokseq, tokenImage);
    }

    private boolean trace_enabled;

    /** Trace enabled. */
    final public boolean trace_enabled() {
        return trace_enabled;
    }

    /** Enable tracing. */
    final public void enable_tracing() {
    }

    /** Disable tracing. */
    final public void disable_tracing() {
    }

    private void jj_rescan_token() {
        jj_rescan = true;
        for (int i = 0; i < 1; i++) {
            try {
                JJCalls p = jj_2_rtns[i];

                do {
                    if (p.gen > jj_gen) {
                        jj_la = p.arg;
                        jj_lastpos = jj_scanpos = p.first;
                        switch (i) {
                        case 0:
                            jj_3_1();
                            break;
                        }
                    }
                    p = p.next;
                } while (p != null);

            } catch (LookaheadSuccess ls) {
            }
        }
        jj_rescan = false;
    }

    private void jj_save(int index, int xla) {
        JJCalls p = jj_2_rtns[index];
        while (p.gen > jj_gen) {
            if (p.next == null) {
                p = p.next = new JJCalls();
                break;
            }
            p = p.next;
        }

        p.gen = jj_gen + xla - jj_la;
        p.first = token;
        p.arg = xla;
    }

    static final class JJCalls {
        int gen;
        Token first;
        int arg;
        JJCalls next;
    }

}

/* RuleParserTokenManager.java */
/* Generated By:JJTree&JavaCC: Do not edit this line. RuleParserTokenManager.java */
package io.leaderli.rule.tree;

import java.io.StringReader;
import io.leaderli.litool.core.exception.LiAssertUtil;
import io.leaderli.rule.RuleContext;

/** Token Manager. */
@SuppressWarnings("unused")
public class RuleParserTokenManager implements RuleParserConstants {

    /** Debug output. */
    public java.io.PrintStream debugStream = System.out;

    /** Set debug output. */
    public void setDebugStream(java.io.PrintStream ds) {
        debugStream = ds;
    }

    private final int jjStopStringLiteralDfa_0(int pos, long active0) {
        switch (pos) {
        case 0:
            if ((active0 & 0x100000c0L) != 0L) {
                jjmatchedKind = 22;
                return 25;
            }
            return -1;
        case 1:
            if ((active0 & 0x100000c0L) != 0L) {
                jjmatchedKind = 22;
                jjmatchedPos = 1;
                return 25;
            }
            return -1;
        case 2:
            if ((active0 & 0x100000c0L) != 0L) {
                jjmatchedKind = 22;
                jjmatchedPos = 2;
                return 25;
            }
            return -1;
        case 3:
            if ((active0 & 0x10000080L) != 0L) {
                jjmatchedKind = 22;
                jjmatchedPos = 3;
                return 25;
            }
            if ((active0 & 0x40L) != 0L)
                return 25;
            return -1;
        default:
            return -1;
        }
    }

    private final int jjStartNfa_0(int pos, long active0) {
        return jjMoveNfa_0(jjStopStringLiteralDfa_0(pos, active0), pos + 1);
    }

    private int jjStopAtPos(int pos, int kind) {
        jjmatchedKind = kind;
        jjmatchedPos = pos;
        return pos + 1;
    }

    private int jjMoveStringLiteralDfa0_0() {
        switch (curChar) {
        case 33:
            return jjMoveStringLiteralDfa1_0(0x100000L);
        case 40:
            return jjStopAtPos(0, 29);
        case 41:
            return jjStopAtPos(0, 30);
        case 44:
            return jjStopAtPos(0, 32);
        case 59:
            return jjStopAtPos(0, 21);
        case 60:
            jjmatchedKind = 16;
            return jjMoveStringLiteralDfa1_0(0x20000L);
        case 61:
            return jjStopAtPos(0, 19);
        case 62:
            jjmatchedKind = 15;
            return jjMoveStringLiteralDfa1_0(0x40000L);
        case 91:
            return jjStopAtPos(0, 31);
        case 93:
            return jjStopAtPos(0, 33);
        case 102:
            return jjMoveStringLiteralDfa1_0(0x80L);
        case 114:
            return jjMoveStringLiteralDfa1_0(0x10000000L);
        case 116:
            return jjMoveStringLiteralDfa1_0(0x40L);
        default:
            return jjMoveNfa_0(2, 0);
        }
    }

    private int jjMoveStringLiteralDfa1_0(long active0) {
        try {
            curChar = input_stream.readChar();
        } catch (java.io.IOException e) {
            jjStopStringLiteralDfa_0(0, active0);
            return 1;
        }
        switch (curChar) {
        case 61:
            if ((active0 & 0x20000L) != 0L)
                return jjStopAtPos(1, 17);
            else if ((active0 & 0x40000L) != 0L)
                return jjStopAtPos(1, 18);
            else if ((active0 & 0x100000L) != 0L)
                return jjStopAtPos(1, 20);
            break;
        case 97:
            return jjMoveStringLiteralDfa2_0(active0, 0x80L);
        case 114:
            return jjMoveStringLiteralDfa2_0(active0, 0x40L);
        case 117:
            return jjMoveStringLiteralDfa2_0(active0, 0x10000000L);
        default:
            break;
        }
        return jjStartNfa_0(0, active0);
    }

    private int jjMoveStringLiteralDfa2_0(long old0, long active0) {
        if (((active0 &= old0)) == 0L)
            return jjStartNfa_0(0, old0);
        try {
            curChar = input_stream.readChar();
        } catch (java.io.IOException e) {
            jjStopStringLiteralDfa_0(1, active0);
            return 2;
        }
        switch (curChar) {
        case 108:
            return jjMoveStringLiteralDfa3_0(active0, 0x10000080L);
        case 117:
            return jjMoveStringLiteralDfa3_0(active0, 0x40L);
        default:
            break;
        }
        return jjStartNfa_0(1, active0);
    }

    private int jjMoveStringLiteralDfa3_0(long old0, long active0) {
        if (((active0 &= old0)) == 0L)
            return jjStartNfa_0(1, old0);
        try {
            curChar = input_stream.readChar();
        } catch (java.io.IOException e) {
            jjStopStringLiteralDfa_0(2, active0);
            return 3;
        }
        switch (curChar) {
        case 101:
            if ((active0 & 0x40L) != 0L)
                return jjStartNfaWithStates_0(3, 6, 25);
            return jjMoveStringLiteralDfa4_0(active0, 0x10000000L);
        case 115:
            return jjMoveStringLiteralDfa4_0(active0, 0x80L);
        default:
            break;
        }
        return jjStartNfa_0(2, active0);
    }

    private int jjMoveStringLiteralDfa4_0(long old0, long active0) {
        if (((active0 &= old0)) == 0L)
            return jjStartNfa_0(2, old0);
        try {
            curChar = input_stream.readChar();
        } catch (java.io.IOException e) {
            jjStopStringLiteralDfa_0(3, active0);
            return 4;
        }
        switch (curChar) {
        case 58:
            if ((active0 & 0x10000000L) != 0L)
                return jjStopAtPos(4, 28);
            break;
        case 101:
            if ((active0 & 0x80L) != 0L)
                return jjStartNfaWithStates_0(4, 7, 25);
            break;
        default:
            break;
        }
        return jjStartNfa_0(3, active0);
    }

    private int jjStartNfaWithStates_0(int pos, int kind, int state) {
        jjmatchedKind = kind;
        jjmatchedPos = pos;
        try {
            curChar = input_stream.readChar();
        } catch (java.io.IOException e) {
            return pos + 1;
        }
        return jjMoveNfa_0(state, pos + 1);
    }

    private int jjMoveNfa_0(int startState, int curPos) {
        int startsAt = 0;
        jjnewStateCnt = 37;
        int i = 1;
        jjstateSet[0] = startState;
        int kind = 0x7fffffff;
        for (;;) {
            if (++jjround == 0x7fffffff)
                ReInitRounds();
            if (curChar < 64) {
                long l = 1L << curChar;
                do {
                    switch (jjstateSet[--i]) {
                    case 2:
                        if ((0x3fe000000000000L & l) != 0L) {
                            if (kind > 11)
                                kind = 11;
                            {
                                jjCheckNAddStates(0, 6);
                            }
                        } else if (curChar == 48) {
                            if (kind > 11)
                                kind = 11;
                            {
                                jjCheckNAddStates(7, 9);
                            }
                        }
                        if ((0x7000000000000L & l) != 0L)
                            jjstateSet[jjnewStateCnt++] = 17;
                        break;
                    case 16:
                        if ((0x7000000000000L & l) != 0L)
                            jjstateSet[jjnewStateCnt++] = 17;
                        break;
                    case 17:
                        if ((0x3ff000000000000L & l) != 0L)
                            jjstateSet[jjnewStateCnt++] = 18;
                        break;
                    case 18:
                        if (curChar == 58)
                            jjstateSet[jjnewStateCnt++] = 19;
                        break;
                    case 19:
                        if ((0x3f000000000000L & l) != 0L)
                            jjstateSet[jjnewStateCnt++] = 20;
                        break;
                    case 20:
                        if ((0x3ff000000000000L & l) != 0L)
                            jjstateSet[jjnewStateCnt++] = 21;
                        break;
                    case 21:
                        if (curChar == 58)
                            jjstateSet[jjnewStateCnt++] = 22;
                        break;
                    case 22:
                        if ((0x3f000000000000L & l) != 0L)
                            jjstateSet[jjnewStateCnt++] = 23;
                        break;
                    case 23:
                        if ((0x3ff000000000000L & l) != 0L && kind > 14)
                            kind = 14;
                        break;
                    case 25:
                        if ((0x3ff000000000000L & l) == 0L)
                            break;
                        if (kind > 22)
                            kind = 22;
                        jjstateSet[jjnewStateCnt++] = 25;
                        break;
                    case 26:
                        if (curChar != 48)
                            break;
                        if (kind > 11)
                            kind = 11; {
                        jjCheckNAddStates(7, 9);
                    }
                        break;
                    case 27:
                        if (curChar == 46)
                            jjstateSet[jjnewStateCnt++] = 28;
                        break;
                    case 28:
                        if ((0x3ff000000000000L & l) == 0L)
                            break;
                        if (kind > 12)
                            kind = 12; {
                        jjCheckNAdd(27);
                    }
                        break;
                    case 29:
                        if (curChar == 46)
                            jjstateSet[jjnewStateCnt++] = 30;
                        break;
                    case 30:
                        if ((0x3ff000000000000L & l) != 0L) {
                            jjCheckNAddTwoStates(29, 31);
                        }
                        break;
                    case 31:
                        if (curChar == 37)
                            kind = 13;
                        break;
                    case 32:
                        if ((0x3fe000000000000L & l) == 0L)
                            break;
                        if (kind > 11)
                            kind = 11; {
                        jjCheckNAddStates(0, 6);
                    }
                        break;
                    case 33:
                        if ((0x3ff000000000000L & l) == 0L)
                            break;
                        if (kind > 11)
                            kind = 11; {
                        jjCheckNAdd(33);
                    }
                        break;
                    case 34:
                        if ((0x3ff000000000000L & l) != 0L) {
                            jjCheckNAddTwoStates(34, 27);
                        }
                        break;
                    case 35:
                        if ((0x3ff000000000000L & l) != 0L) {
                            jjCheckNAddTwoStates(35, 29);
                        }
                        break;
                    case 36:
                        if ((0x3ff000000000000L & l) != 0L) {
                            jjCheckNAddTwoStates(36, 31);
                        }
                        break;
                    default:
                        break;
                    }
                } while (i != startsAt);
            } else if (curChar < 128) {
                long l = 1L << (curChar & 077);
                do {
                    switch (jjstateSet[--i]) {
                    case 2:
                        if ((0x7fffffe87fffffeL & l) != 0L) {
                            if (kind > 22)
                                kind = 22;
                            {
                                jjCheckNAdd(25);
                            }
                        }
                        if (curChar == 110)
                            jjstateSet[jjnewStateCnt++] = 14;
                        else if (curChar == 78)
                            jjstateSet[jjnewStateCnt++] = 11;
                        else if (curChar == 111)
                            jjstateSet[jjnewStateCnt++] = 8;
                        else if (curChar == 79)
                            jjstateSet[jjnewStateCnt++] = 6;
                        else if (curChar == 97)
                            jjstateSet[jjnewStateCnt++] = 4;
                        else if (curChar == 65)
                            jjstateSet[jjnewStateCnt++] = 1;
                        break;
                    case 0:
                        if (curChar == 68 && kind > 8)
                            kind = 8;
                        break;
                    case 1:
                        if (curChar == 78)
                            jjstateSet[jjnewStateCnt++] = 0;
                        break;
                    case 3:
                        if (curChar == 100 && kind > 8)
                            kind = 8;
                        break;
                    case 4:
                        if (curChar == 110)
                            jjstateSet[jjnewStateCnt++] = 3;
                        break;
                    case 5:
                        if (curChar == 97)
                            jjstateSet[jjnewStateCnt++] = 4;
                        break;
                    case 6:
                        if (curChar == 82 && kind > 9)
                            kind = 9;
                        break;
                    case 7:
                        if (curChar == 79)
                            jjstateSet[jjnewStateCnt++] = 6;
                        break;
                    case 8:
                        if (curChar == 114 && kind > 9)
                            kind = 9;
                        break;
                    case 9:
                        if (curChar == 111)
                            jjstateSet[jjnewStateCnt++] = 8;
                        break;
                    case 10:
                        if (curChar == 84 && kind > 10)
                            kind = 10;
                        break;
                    case 11:
                        if (curChar == 79)
                            jjstateSet[jjnewStateCnt++] = 10;
                        break;
                    case 12:
                        if (curChar == 78)
                            jjstateSet[jjnewStateCnt++] = 11;
                        break;
                    case 13:
                        if (curChar == 116 && kind > 10)
                            kind = 10;
                        break;
                    case 14:
                        if (curChar == 111)
                            jjstateSet[jjnewStateCnt++] = 13;
                        break;
                    case 15:
                        if (curChar == 110)
                            jjstateSet[jjnewStateCnt++] = 14;
                        break;
                    case 24:
                    case 25:
                        if ((0x7fffffe87fffffeL & l) == 0L)
                            break;
                        if (kind > 22)
                            kind = 22; {
                        jjCheckNAdd(25);
                    }
                        break;
                    default:
                        break;
                    }
                } while (i != startsAt);
            } else {
                int i2 = (curChar & 0xff) >> 6;
                long l2 = 1L << (curChar & 077);
                do {
                    switch (jjstateSet[--i]) {
                    default:
                        break;
                    }
                } while (i != startsAt);
            }
            if (kind != 0x7fffffff) {
                jjmatchedKind = kind;
                jjmatchedPos = curPos;
                kind = 0x7fffffff;
            }
            ++curPos;
            if ((i = jjnewStateCnt) == (startsAt = 37 - (jjnewStateCnt = startsAt)))
                return curPos;
            try {
                curChar = input_stream.readChar();
            } catch (java.io.IOException e) {
                return curPos;
            }
        }
    }

    private int jjMoveStringLiteralDfa0_1() {
        return jjMoveNfa_1(0, 0);
    }

    static final long[] jjbitVec0 = { 0x0L, 0x0L, 0xffffffffffffffffL, 0xffffffffffffffffL };

    private int jjMoveNfa_1(int startState, int curPos) {
        int startsAt = 0;
        jjnewStateCnt = 20;
        int i = 1;
        jjstateSet[0] = startState;
        int kind = 0x7fffffff;
        for (;;) {
            if (++jjround == 0x7fffffff)
                ReInitRounds();
            if (curChar < 64) {
                long l = 1L << curChar;
                do {
                    switch (jjstateSet[--i]) {
                    case 0:
                        if ((0xffffffffffffd9ffL & l) != 0L) {
                            if (kind > 27)
                                kind = 27;
                            {
                                jjCheckNAdd(8);
                            }
                        }
                        if ((0x3fe000000000000L & l) != 0L) {
                            if (kind > 23)
                                kind = 23;
                            {
                                jjCheckNAddStates(10, 16);
                            }
                        } else if (curChar == 48) {
                            if (kind > 23)
                                kind = 23;
                            {
                                jjCheckNAddStates(17, 19);
                            }
                        }
                        if ((0x7000000000000L & l) != 0L)
                            jjstateSet[jjnewStateCnt++] = 1;
                        break;
                    case 1:
                        if ((0x3ff000000000000L & l) != 0L)
                            jjstateSet[jjnewStateCnt++] = 2;
                        break;
                    case 2:
                        if (curChar == 58)
                            jjstateSet[jjnewStateCnt++] = 3;
                        break;
                    case 3:
                        if ((0x3f000000000000L & l) != 0L)
                            jjstateSet[jjnewStateCnt++] = 4;
                        break;
                    case 4:
                        if ((0x3ff000000000000L & l) != 0L)
                            jjstateSet[jjnewStateCnt++] = 5;
                        break;
                    case 5:
                        if (curChar == 58)
                            jjstateSet[jjnewStateCnt++] = 6;
                        break;
                    case 6:
                        if ((0x3f000000000000L & l) != 0L)
                            jjstateSet[jjnewStateCnt++] = 7;
                        break;
                    case 7:
                        if ((0x3ff000000000000L & l) != 0L && kind > 26)
                            kind = 26;
                        break;
                    case 8:
                        if ((0xffffffffffffd9ffL & l) == 0L)
                            break;
                        if (kind > 27)
                            kind = 27; {
                        jjCheckNAdd(8);
                    }
                        break;
                    case 9:
                        if (curChar != 48)
                            break;
                        if (kind > 23)
                            kind = 23; {
                        jjCheckNAddStates(17, 19);
                    }
                        break;
                    case 10:
                        if (curChar == 46)
                            jjstateSet[jjnewStateCnt++] = 11;
                        break;
                    case 11:
                        if ((0x3ff000000000000L & l) == 0L)
                            break;
                        if (kind > 24)
                            kind = 24; {
                        jjCheckNAdd(10);
                    }
                        break;
                    case 12:
                        if (curChar == 46)
                            jjstateSet[jjnewStateCnt++] = 13;
                        break;
                    case 13:
                        if ((0x3ff000000000000L & l) != 0L) {
                            jjCheckNAddTwoStates(12, 14);
                        }
                        break;
                    case 14:
                        if (curChar == 37 && kind > 25)
                            kind = 25;
                        break;
                    case 15:
                        if ((0x3fe000000000000L & l) == 0L)
                            break;
                        if (kind > 23)
                            kind = 23; {
                        jjCheckNAddStates(10, 16);
                    }
                        break;
                    case 16:
                        if ((0x3ff000000000000L & l) == 0L)
                            break;
                        if (kind > 23)
                            kind = 23; {
                        jjCheckNAdd(16);
                    }
                        break;
                    case 17:
                        if ((0x3ff000000000000L & l) != 0L) {
                            jjCheckNAddTwoStates(17, 10);
                        }
                        break;
                    case 18:
                        if ((0x3ff000000000000L & l) != 0L) {
                            jjCheckNAddTwoStates(18, 12);
                        }
                        break;
                    case 19:
                        if ((0x3ff000000000000L & l) != 0L) {
                            jjCheckNAddTwoStates(19, 14);
                        }
                        break;
                    default:
                        break;
                    }
                } while (i != startsAt);
            } else if (curChar < 128) {
                long l = 1L << (curChar & 077);
                do {
                    switch (jjstateSet[--i]) {
                    case 0:
                    case 8:
                        kind = 27; {
                        jjCheckNAdd(8);
                    }
                        break;
                    default:
                        break;
                    }
                } while (i != startsAt);
            } else {
                int i2 = (curChar & 0xff) >> 6;
                long l2 = 1L << (curChar & 077);
                do {
                    switch (jjstateSet[--i]) {
                    case 0:
                    case 8:
                        if ((jjbitVec0[i2] & l2) == 0L)
                            break;
                        if (kind > 27)
                            kind = 27; {
                        jjCheckNAdd(8);
                    }
                        break;
                    default:
                        break;
                    }
                } while (i != startsAt);
            }
            if (kind != 0x7fffffff) {
                jjmatchedKind = kind;
                jjmatchedPos = curPos;
                kind = 0x7fffffff;
            }
            ++curPos;
            if ((i = jjnewStateCnt) == (startsAt = 20 - (jjnewStateCnt = startsAt)))
                return curPos;
            try {
                curChar = input_stream.readChar();
            } catch (java.io.IOException e) {
                return curPos;
            }
        }
    }

    /** Token literal values. */
    public static final String[] jjstrLiteralImages = { "", null, null, null, null, null, "\164\162\165\145",
            "\146\141\154\163\145", null, null, null, null, null, null, null, "\76", "\74", "\74\75", "\76\75", "\75",
            "\41\75", "\73", null, null, null, null, null, null, "\162\165\154\145\72", "\50", "\51", "\133", "\54",
            "\135", };

    protected Token jjFillToken() {
        final Token t;
        final String curTokenImage;
        final int beginLine;
        final int endLine;
        final int beginColumn;
        final int endColumn;
        String im = jjstrLiteralImages[jjmatchedKind];
        curTokenImage = (im == null) ? input_stream.GetImage() : im;
        beginLine = input_stream.getBeginLine();
        beginColumn = input_stream.getBeginColumn();
        endLine = input_stream.getEndLine();
        endColumn = input_stream.getEndColumn();
        t = Token.newToken(jjmatchedKind, curTokenImage);

        t.beginLine = beginLine;
        t.endLine = endLine;
        t.beginColumn = beginColumn;
        t.endColumn = endColumn;

        return t;
    }

    static final int[] jjnextStates = { 33, 34, 27, 35, 29, 36, 31, 27, 29, 31, 16, 17, 10, 18, 12, 19, 14, 10, 12,
            14, };

    int curLexState = 0;
    int defaultLexState = 0;
    int jjnewStateCnt;
    int jjround;
    int jjmatchedPos;
    int jjmatchedKind;

    /** Get the next Token. */
    public Token getNextToken() {
        Token matchedToken;
        int curPos = 0;

        EOFLoop: for (;;) {
            try {
                curChar = input_stream.BeginToken();
            } catch (Exception e) {
                jjmatchedKind = 0;
                jjmatchedPos = -1;
                matchedToken = jjFillToken();
                return matchedToken;
            }

            switch (curLexState) {
            case 0:
                try {
                    input_stream.backup(0);
                    while (curChar <= 32 && (0x100003600L & (1L << curChar)) != 0L)
                        curChar = input_stream.BeginToken();
                } catch (java.io.IOException e1) {
                    continue EOFLoop;
                }
                jjmatchedKind = 0x7fffffff;
                jjmatchedPos = 0;
                curPos = jjMoveStringLiteralDfa0_0();
                break;
            case 1:
                jjmatchedKind = 0x7fffffff;
                jjmatchedPos = 0;
                curPos = jjMoveStringLiteralDfa0_1();
                break;
            }
            if (jjmatchedKind != 0x7fffffff) {
                if (jjmatchedPos + 1 < curPos)
                    input_stream.backup(curPos - jjmatchedPos - 1);
                if ((jjtoToken[jjmatchedKind >> 6] & (1L << (jjmatchedKind & 077))) != 0L) {
                    matchedToken = jjFillToken();
                    if (jjnewLexState[jjmatchedKind] != -1)
                        curLexState = jjnewLexState[jjmatchedKind];
                    return matchedToken;
                } else {
                    if (jjnewLexState[jjmatchedKind] != -1)
                        curLexState = jjnewLexState[jjmatchedKind];
                    continue EOFLoop;
                }
            }
            int error_line = input_stream.getEndLine();
            int error_column = input_stream.getEndColumn();
            String error_after = null;
            boolean EOFSeen = false;
            try {
                input_stream.readChar();
                input_stream.backup(1);
            } catch (java.io.IOException e1) {
                EOFSeen = true;
                error_after = curPos <= 1 ? "" : input_stream.GetImage();
                if (curChar == '\n' || curChar == '\r') {
                    error_line++;
                    error_column = 0;
                } else
                    error_column++;
            }
            if (!EOFSeen) {
                input_stream.backup(1);
                error_after = curPos <= 1 ? "" : input_stream.GetImage();
            }
            throw new TokenMgrError(EOFSeen, curLexState, error_line, error_column, error_after, curChar,
                    TokenMgrError.LEXICAL_ERROR);
        }
    }

    void SkipLexicalActions(Token matchedToken) {
        switch (jjmatchedKind) {
        default:
            break;
        }
    }

    void MoreLexicalActions() {
        jjimageLen += (lengthOfMatch = jjmatchedPos + 1);
        switch (jjmatchedKind) {
        default:
            break;
        }
    }

    void TokenLexicalActions(Token matchedToken) {
        switch (jjmatchedKind) {
        default:
            break;
        }
    }

    private void jjCheckNAdd(int state) {
        if (jjrounds[state] != jjround) {
            jjstateSet[jjnewStateCnt++] = state;
            jjrounds[state] = jjround;
        }
    }

    private void jjAddStates(int start, int end) {
        do {
            jjstateSet[jjnewStateCnt++] = jjnextStates[start];
        } while (start++ != end);
    }

    private void jjCheckNAddTwoStates(int state1, int state2) {
        jjCheckNAdd(state1);
        jjCheckNAdd(state2);
    }

    private void jjCheckNAddStates(int start, int end) {
        do {
            jjCheckNAdd(jjnextStates[start]);
        } while (start++ != end);
    }

    /** Constructor. */
    public RuleParserTokenManager(SimpleCharStream stream) {

        if (SimpleCharStream.staticFlag)
            throw new Error("ERROR: Cannot use a static CharStream class with a non-static lexical analyzer.");

        input_stream = stream;
    }

    /** Constructor. */
    public RuleParserTokenManager(SimpleCharStream stream, int lexState) {
        ReInit(stream);
        SwitchTo(lexState);
    }

    /** Reinitialise parser. */

    public void ReInit(SimpleCharStream stream) {

        jjmatchedPos = jjnewStateCnt = 0;
        curLexState = defaultLexState;
        input_stream = stream;
        ReInitRounds();
    }

    private void ReInitRounds() {
        int i;
        jjround = 0x80000001;
        for (i = 37; i-- > 0;)
            jjrounds[i] = 0x80000000;
    }

    /** Reinitialise parser. */
    public void ReInit(SimpleCharStream stream, int lexState)

    {
        ReInit(stream);
        SwitchTo(lexState);
    }

    /** Switch to specified lex state. */
    public void SwitchTo(int lexState) {
        if (lexState >= 2 || lexState < 0)
            throw new TokenMgrError("Error: Ignoring invalid lexical state : " + lexState + ". State unchanged.",
                    TokenMgrError.INVALID_LEXICAL_STATE);
        else
            curLexState = lexState;
    }

    /** Lexer state names. */
    public static final String[] lexStateNames = { "DEFAULT", "COMPARE_STATE", };

    /** Lex State array. */
    public static final int[] jjnewLexState = { -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
            -1, 1, 1, -1, -1, 0, 0, 0, 0, 0, -1, -1, -1, -1, -1, -1, };
    static final long[] jjtoToken = { 0x3ffffffc1L, };
    static final long[] jjtoSkip = { 0x3eL, };
    static final long[] jjtoSpecial = { 0x0L, };
    static final long[] jjtoMore = { 0x0L, };
    protected SimpleCharStream input_stream;

    private final int[] jjrounds = new int[37];
    private final int[] jjstateSet = new int[2 * 37];
    private final StringBuilder jjimage = new StringBuilder();
    private StringBuilder image = jjimage;
    private int jjimageLen;
    private int lengthOfMatch;
    protected int curChar;
}

/* Generated By:JJTree&JavaCC: Do not edit this line. RuleParserConstants.java */
package io.leaderli.rule.tree;

/**
 * Token literal values and constants. Generated by org.javacc.parser.OtherFilesGen#start()
 */
public interface RuleParserConstants {

    /** End of File. */
    int EOF = 0;
    /** RegularExpression Id. */
    int TRUE = 6;
    /** RegularExpression Id. */
    int FALSE = 7;
    /** RegularExpression Id. */
    int AND = 8;
    /** RegularExpression Id. */
    int OR = 9;
    /** RegularExpression Id. */
    int NOT = 10;
    /** RegularExpression Id. */
    int INT = 11;
    /** RegularExpression Id. */
    int DOUBLE = 12;
    /** RegularExpression Id. */
    int PERCENT = 13;
    /** RegularExpression Id. */
    int TIME = 14;
    /** RegularExpression Id. */
    int GT = 15;
    /** RegularExpression Id. */
    int LT = 16;
    /** RegularExpression Id. */
    int LE = 17;
    /** RegularExpression Id. */
    int GE = 18;
    /** RegularExpression Id. */
    int EQ = 19;
    /** RegularExpression Id. */
    int NE = 20;
    /** RegularExpression Id. */
    int LPAREN = 21;
    /** RegularExpression Id. */
    int RPAREN = 22;
    /** RegularExpression Id. */
    int SEMICOLON = 23;
    /** RegularExpression Id. */
    int IDENTIFIER = 24;
    /** RegularExpression Id. */
    int _INT = 25;
    /** RegularExpression Id. */
    int _DOUBLE = 26;
    /** RegularExpression Id. */
    int _PERCENT = 27;
    /** RegularExpression Id. */
    int _TIME = 28;
    /** RegularExpression Id. */
    int LBRACKET = 29;
    /** RegularExpression Id. */
    int STRING_LITERAL = 30;
    /** RegularExpression Id. */
    int COMMA = 31;
    /** RegularExpression Id. */
    int _INT2 = 32;
    /** RegularExpression Id. */
    int _TIME2 = 33;
    /** RegularExpression Id. */
    int _DOUBLE2 = 34;
    /** RegularExpression Id. */
    int _PERCENT2 = 35;
    /** RegularExpression Id. */
    int RBRACKET = 36;
    /** RegularExpression Id. */
    int STRING_LITERAL2 = 37;

    /** Lexical state. */
    int DEFAULT = 0;
    /** Lexical state. */
    int COMPARE_STATE = 1;
    /** Lexical state. */
    int ARR_STATE = 2;

    /** Literal token values. */
    String[] tokenImage = { "<EOF>", "\" \"", "\"\\t\"", "\"\\n\"", "\"\\r\"", "\"\\f\"", "\"true\"", "\"false\"",
            "<AND>", "<OR>", "<NOT>", "<INT>", "<DOUBLE>", "<PERCENT>", "<TIME>", "\">\"", "\"<\"", "\"<=\"", "\">=\"",
            "\"=\"", "\"!=\"", "\"(\"", "\")\"", "\";\"", "<IDENTIFIER>", "<_INT>", "<_DOUBLE>", "<_PERCENT>",
            "<_TIME>", "\"[\"", "<STRING_LITERAL>", "\",\"", "<_INT2>", "<_TIME2>", "<_DOUBLE2>", "<_PERCENT2>",
            "\"]\"", "<STRING_LITERAL2>", "\"rule:\"", };

}
